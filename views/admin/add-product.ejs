<!DOCTYPE html>
<html lang="en" class="light">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Add Product</title>
  <link rel="icon" href="/images/logo.png" type="image/x-icon">
  <script src="https://cdn.tailwindcss.com"></script>
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
  <link href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.css" rel="stylesheet">
  <script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.js"></script>
  <script src="/js/toggle.js"></script>


  <style>
    @keyframes fadeInUp {
      from {
        opacity: 0;
        transform: translateY(20px);
      }

      to {
        opacity: 1;
        transform: translateY(0);
      }
    }

    .fade-in-up {
      animation: fadeInUp 0.5s ease-out;
    }

    .image-upload {
      transition: all 0.3s ease;
    }

    .image-upload:hover {
      transform: scale(1.05);
      box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
    }

    .theme-toggle {
      cursor: pointer;
      padding: 5px 10px;
      background-color: #f0f0f0;
      border: 1px solid #ccc;
      border-radius: 4px;
    }
  </style>
</head>

<body class="bg-gray-100 font-sans transition-colors duration-300 dark:bg-gray-900">
  <%- include('../layouts/admin-sidebar.ejs') %>




  <div class="container mx-auto p-6 ml-64">


    <div class="flex justify-between items-center mb-6">
      <h1 class="text-3xl font-bold text-gray-800 dark:text-gray-200">Add Product</h1>
      <div class="theme-toggle" id="themeToggle"></div>
    </div>


    <% if (error_msg.length > 0) { %>
    <div id="errorMessage" class="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-6 fade-in-up" role="alert">
      <strong class="font-bold">Error!</strong>
      <span class="block sm:inline"><%= error_msg %></span>
    </div>
    <% } %>


    <form action="/admin/add-product" method="post" enctype="multipart/form-data">
      <!-- Image Upload Section -->
      <div class="bg-white dark:bg-gray-800 p-6 rounded-lg shadow-md mb-6 fade-in-up">
        <h2 class="text-xl font-semibold mb-4 dark:text-gray-200">Upload Images</h2>
        <div id="dropArea" class="image-upload h-48 flex justify-center items-center border-2 border-dashed border-gray-300 rounded-md dark:border-gray-600 hover:border-blue-500 dark:hover:border-blue-400 transition-colors duration-300">
          <label class="cursor-pointer w-full h-full flex flex-col justify-center items-center">
            <input id="imageInput" type="file" name="productImage" accept="image/*" class="hidden" multiple />
            <div id="uploadPrompt" class="text-gray-500 dark:text-gray-400 flex flex-col items-center">
              <i class="fas fa-cloud-upload-alt text-4xl mb-2"></i>
              <span class="text-center">Drag and drop images here, or click to select</span>
              <span class="mt-2 text-sm">(Max 4 images)</span>
            </div>
          </label>
        </div>
        <div id="imagePreviewContainer" class="grid grid-cols-2 md:grid-cols-4 gap-4 mt-4"></div>
      </div>

      <!-- General Information Section -->
      <div class="bg-white dark:bg-gray-800 p-6 rounded-lg shadow-md mb-6 fade-in-up">
        <h2 class="text-xl font-semibold mb-4 dark:text-gray-200">General Information</h2>
        <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
          <div class="input-box">
            <label for="productName" class="block text-sm font-medium text-gray-700 dark:text-gray-300">Product Name</label>
            <input type="text" name="name" id="productName" class="mt-1 p-2 w-full border rounded-md focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:text-white" placeholder="Enter product name">
          </div>
          <div class="input-box">
            <label for="stockQuantity" class="block text-sm font-medium text-gray-700 dark:text-gray-300">Stock Quantity</label>
            <input type="number" name="quantity" id="stockQuantity" class="mt-1 p-2 w-full border rounded-md focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:text-white" placeholder="Enter stock quantity">
          </div>
          <div class="input-box">
            <label for="brand" class="block text-sm font-medium text-gray-700 dark:text-gray-300">Brand</label>
            <input type="text" name="brand" id="brand" class="mt-1 p-2 w-full border rounded-md focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:text-white" placeholder="Brand">
          </div>
          <div class="input-box">
            <label for="color" class="block text-sm font-medium text-gray-700 dark:text-gray-300">Colour</label>
            <input type="text" name="color" id="color" class="mt-1 p-2 w-full border rounded-md focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:text-white" placeholder="Colour">
          </div>
          <div class="col-span-2 input-box">
            <label for="description" class="block text-sm font-medium text-gray-700 dark:text-gray-300">Description</label>
            <textarea id="description" name="description" rows="4" class="mt-1 p-2 w-full border rounded-md focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:text-white" placeholder="Enter product description"></textarea>
          </div>
        </div>
      </div>

      <!-- Pricing Section -->
      <div class="bg-white dark:bg-gray-800 p-6 rounded-lg shadow-md mb-6 fade-in-up">
        <h2 class="text-xl font-semibold mb-4 dark:text-gray-200">Pricing</h2>
        <div class="grid grid-cols-1 md:grid-cols-3 gap-6">
          <div class="input-box">
            <label for="basePrice" class="block text-sm font-medium text-gray-700 dark:text-gray-300">Base Price</label>
            <input type="number" name="price" id="basePrice" class="mt-1 p-2 w-full border rounded-md focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:text-white" placeholder="Enter base price">
          </div>
          <div class="input-box">
            <label for="discount" class="block text-sm font-medium text-gray-700 dark:text-gray-300">Discount Percentage</label>
            <input type="number" name="discount" id="discount" class="mt-1 p-2 w-full border rounded-md focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:text-white" placeholder="Enter discount percentage">
          </div>
        </div>
      </div>

      <!-- Category Section -->
      <div class="bg-white dark:bg-gray-800 p-6 rounded-lg shadow-md mb-6 fade-in-up">
        <h2 class="text-xl font-semibold mb-4 dark:text-gray-200">Category & Tags</h2>
        <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
          <div class="input-box">
            <label for="category" class="block text-sm font-medium text-gray-700 dark:text-gray-300">Product Category</label>
            <select id="category" name="category" class="mt-1 p-2 w-full border rounded-md focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:text-white">
              <option>Select category</option>
              <% categories.forEach( category => { %>
              <option value="<%= category.name %>"><%= category.name %></option>
              <% }) %>
            </select>
          </div>
        </div>
      </div>

      <!-- Submit Button -->
      <div class="flex justify-center mb-6 fade-in-up">
        <button type="submit" class="px-6 py-3 bg-blue-600 text-white font-bold rounded-lg hover:bg-blue-700 focus:outline-none transition-all duration-300 transform hover:scale-105 hover:shadow-lg">Add Product</button>
      </div>
    </form>

    <!-- Crop/Edit Modal -->
    <div id="imageModal" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center hidden z-50">
      <div class="bg-white dark:bg-gray-800 rounded-lg w-11/12 md:w-3/4 lg:w-1/2 max-h-90vh overflow-y-auto">
        <div class="flex justify-between items-center p-4 border-b dark:border-gray-700">
          <h2 class="text-xl font-bold dark:text-gray-200">Crop Image</h2>
          <button id="closeModal" class="text-gray-500 dark:text-gray-400 hover:text-gray-700">&times;</button>
        </div>
        <div class="p-4">
          <div class="max-h-[60vh] overflow-hidden">
            <img id="modalImage" src="" alt="Image to Crop" class="max-w-full h-auto">
          </div>
          <div class="flex justify-end mt-4">
            <button id="cropButton" class="px-4 py-2 bg-green-500 text-white rounded-lg mr-2 hover:bg-green-600 transition-colors">Crop</button>
            <button id="saveButton" class="px-4 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600 transition-colors">Save</button>
          </div>
        </div>
      </div>
    </div>

    <script>
      // Theme toggle functionality
      const themeToggle = document.getElementById('themeToggle');
      const html = document.documentElement;

      themeToggle.addEventListener('click', () => {
        html.classList.toggle('dark');
        localStorage.setItem('theme', html.classList.contains('dark') ? 'dark' : 'light');
      });

      // Check for saved theme preference or prefer-color-scheme
      const savedTheme = localStorage.getItem('theme');
      const prefersDark = window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches;

      if (savedTheme === 'dark' || (!savedTheme && prefersDark)) {
        html.classList.add('dark');
      }

      // Image upload and preview functionality
      const dropArea = document.getElementById('dropArea');
      const imageInput = document.getElementById('imageInput');
      const imagePreviewContainer = document.getElementById('imagePreviewContainer');
      const imageModal = document.getElementById('imageModal');
      const modalImage = document.getElementById('modalImage');
      const closeModal = document.getElementById('closeModal');
      const cropButton = document.getElementById('cropButton');
      const saveButton = document.getElementById('saveButton');
      const brightnessControl = document.getElementById('brightness');
      const contrastControl = document.getElementById('contrast');

      let cropper;
      let currentEditingImage;

      dropArea.addEventListener('dragover', (e) => {
        e.preventDefault();
        dropArea.classList.add('border-blue-500');
      });

      dropArea.addEventListener('dragleave', () => {
        dropArea.classList.remove('border-blue-500');
      });

      dropArea.addEventListener('drop', (e) => {
        e.preventDefault();
        dropArea.classList.remove('border-blue-500');
        const files = e.dataTransfer.files;
        handleFiles(files);
      });

      imageInput.addEventListener('change', (e) => {
        handleFiles(e.target.files);
      });

      function handleFiles(files) {
        Array.from(files).forEach((file, index) => {
          if (index >= 4) return; // Limit to 4 images
          const reader = new FileReader();
          reader.onload = (e) => {
            const imgDiv = createImagePreview(e.target.result);
            imagePreviewContainer.appendChild(imgDiv);
          };
          reader.readAsDataURL(file);
        });
      }


      function createImagePreview(src) {
        const imgDiv = document.createElement('div');
        imgDiv.className = 'relative border rounded-lg overflow-hidden';
        imgDiv.innerHTML = `
        <img src="${src}" class="object-cover w-full h-48" alt="Image Preview">
        <div class="absolute top-0 right-0 p-1">
          <button class="bg-red-500 text-white rounded-full p-1 hover:bg-red-600 transition-colors" onclick="removeImage(this)">
            <i class="fas fa-times"></i>
          </button>
        </div>
        <div class="absolute bottom-0 left-0 right-0 bg-black bg-opacity-50 text-white p-1 text-center">
          <button class="hover:text-blue-300 transition-colors" onclick="editImage(this)">
            <i class="fas fa-crop mr-1"></i>Crop
          </button>
        </div>
      `;
        return imgDiv;
      }

      function removeImage(button) {
        button.closest('.relative').remove();
      }

      function editImage(button) {
        currentEditingImage = button.closest('.relative').querySelector('img');
        modalImage.src = currentEditingImage.src;
        imageModal.classList.remove('hidden');
        initCropper();
      }

      function initCropper() {
        if (cropper) {
          cropper.destroy();
        }
        cropper = new Cropper(modalImage, {
          aspectRatio: NaN,
          viewMode: 1,
          autoCropArea: 1,
        });
      }

      closeModal.addEventListener('click', () => {
        imageModal.classList.add('hidden');
        if (cropper) {
          cropper.destroy();
          cropper = null;
        }
      });

      cropButton.addEventListener('click', () => {
        const croppedCanvas = cropper.getCroppedCanvas({
          width: 400,
          height: 300
        });
        modalImage.src = croppedCanvas.toDataURL('image/jpeg');
        cropper.destroy();
        initCropper();
      });

      saveButton.addEventListener('click', () => {
        const canvas = cropper.getCroppedCanvas({
          width: 400,
          height: 300
        });
        currentEditingImage.src = canvas.toDataURL('image/jpeg');
        imageModal.classList.add('hidden');
        cropper.destroy();
        cropper = null;
      });

      brightnessControl.addEventListener('input', applyFilters);
      contrastControl.addEventListener('input', applyFilters);

      function applyFilters() {
        const brightness = brightnessControl.value;
        const contrast = contrastControl.value;
        modalImage.style.filter = `brightness(${100 + parseInt(brightness)}%) contrast(${100 + parseInt(contrast)}%)`;
      }

      // Form submission with custom validation
      const form = document.querySelector('form');
      form.addEventListener('submit', (e) => {
        e.preventDefault();
        if (validateForm()) {
          form.submit();
        }
      });

      function validateForm() {
        let isValid = true;
        const requiredFields = form.querySelectorAll('[required]');
        requiredFields.forEach(field => {
          if (!field.value.trim()) {
            isValid = false;
            showError(field, 'This field is required');
          } else {
            clearError(field);
          }
        });

        const imageCount = imagePreviewContainer.children.length;
        if (imageCount === 0) {
          isValid = false;
          showError(dropArea, 'At least one image is required');
        } else {
          clearError(dropArea);
        }

        return isValid;
      }

      function showError(element, message) {
        const errorDiv = element.parentElement.querySelector('.error-message') || document.createElement('div');
        errorDiv.className = 'error-message text-red-500 text-sm mt-1';
        errorDiv.textContent = message;
        if (!element.parentElement.querySelector('.error-message')) {
          element.parentElement.appendChild(errorDiv);
        }
        element.classList.add('border-red-500');
      }

      function clearError(element) {
        const errorDiv = element.parentElement.querySelector('.error-message');
        if (errorDiv) {
          errorDiv.remove();
        }
        element.classList.remove('border-red-500');
      }

      // Add animation to form sections
      const formSections = document.querySelectorAll('.fade-in-up');
      formSections.forEach((section, index) => {
        section.style.animationDelay = `${index * 0.1}s`;
      });
    </script>
</body>

</html>