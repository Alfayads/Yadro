<!DOCTYPE html>
<html lang="en" class="dark">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Yadro - Announcements</title>
  <script src="https://cdn.tailwindcss.com"></script>
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
  <style>
    :root {
      --primary-dark: #1f2937;
      --secondary-dark: #111827;
      --accent-blue: #3b82f6;
      --text-primary: #e5e7eb;
      --text-secondary: #9ca3af;
    }

    body {
      background-color: var(--secondary-dark);
      color: var(--text-primary);
    }

    @keyframes fadeInUp {
      from {
        opacity: 0;
        transform: translateY(20px);
      }

      to {
        opacity: 1;
        transform: translateY(0);
      }
    }

    @keyframes glowPulse {
      0% {
        box-shadow: 0 0 5px rgba(59, 130, 246, 0.5);
      }

      50% {
        box-shadow: 0 0 15px rgba(59, 130, 246, 0.8);
      }

      100% {
        box-shadow: 0 0 5px rgba(59, 130, 246, 0.5);
      }
    }

    .fade-in-up {
      animation: fadeInUp 0.6s ease-out forwards;
    }

    /* Enhanced Search Container */
    .search-container {
      background: var(--primary-dark);
      border-radius: 12px;
      box-shadow: 0 4px 20px rgba(0, 0, 0, 0.3);
      padding: 1.5rem;
      transition: all 0.3s ease;
      border: 1px solid rgba(255, 255, 255, 0.1);
    }

    .search-container:hover {
      box-shadow: 0 6px 24px rgba(0, 0, 0, 0.4);
      border-color: rgba(59, 130, 246, 0.4);
    }

    .search-input {
      background: rgba(17, 24, 39, 0.8);
      border: 1px solid rgba(255, 255, 255, 0.1);
      color: var(--text-primary);
      padding: 0.75rem 1rem;
      width: 300px;
      border-radius: 8px;
      transition: all 0.3s ease;
    }

    .search-input:focus {
      background: rgba(17, 24, 39, 0.95);
      border-color: var(--accent-blue);
      box-shadow: 0 0 0 2px rgba(59, 130, 246, 0.2);
      outline: none;
    }

    /* Table Styling */
    .table-container {
      z-index: 0;
      background: var(--primary-dark);
      border-radius: 16px;
      box-shadow: 0 4px 20px rgba(0, 0, 0, 0.3);
      border: 1px solid rgba(255, 255, 255, 0.1);
      overflow: hidden;
    }

    .table-row {
      transition: all 0.2s ease;
      border-bottom: 1px solid rgba(255, 255, 255, 0.1);
    }

    .table-row:hover {
      background: rgba(59, 130, 246, 0.1);
      transform: translateX(4px);
    }

    /* Announcement Input */
    .announcement-input {
      background: var(--primary-dark);
      border: 1px solid rgba(255, 255, 255, 0.1);
      color: var(--text-primary);
      padding: 0.75rem 1rem;
      border-radius: 8px;
      transition: all 0.3s ease;
      width: 100%;
      resize: none;
    }

    .announcement-input:focus {
      background: rgba(17, 24, 39, 0.95);
      border-color: var(--accent-blue);
      box-shadow: 0 0 0 2px rgba(59, 130, 246, 0.2);
      outline: none;
    }

    /* Add Announcement Button */
    .add-announcement-btn {
      background: linear-gradient(135deg, #10b981, #059669);
      color: white;
      padding: 0.75rem 1.5rem;
      border-radius: 8px;
      transition: all 0.3s ease;
      border: none;
      font-weight: 500;
      text-shadow: 0 1px 2px rgba(0, 0, 0, 0.2);
    }

    .add-announcement-btn:hover {
      transform: translateY(-2px);
      box-shadow: 0 4px 12px rgba(16, 185, 129, 0.3);
    }

    /* Action Icons */
    .action-icon {
      padding: 0.5rem;
      border-radius: 8px;
      transition: all 0.2s ease;
      color: var(--text-secondary);
      position: relative;
    }

    .edit-icon:hover {
      background: rgba(59, 130, 246, 0.2);
      color: #60a5fa;
    }

    .view-icon:hover {
      background: rgba(16, 185, 129, 0.2);
      color: #34d399;
    }

    .delete-icon:hover {
      background: rgba(239, 68, 68, 0.2);
      color: #f87171;
    }

    .tooltip {
      position: absolute;
      bottom: 100%;
      left: 50%;
      transform: translateX(-50%);
      padding: 0.5rem 1rem;
      background: rgba(0, 0, 0, 0.9);
      color: white;
      border-radius: 6px;
      font-size: 0.875rem;
      opacity: 0;
      visibility: hidden;
      transition: all 0.3s ease;
      white-space: nowrap;
      pointer-events: none;
    }

    .action-icon:hover .tooltip {
      opacity: 1;
      visibility: visible;
      transform: translateX(-50%) translateY(-8px);
    }

    .emoji-picker {
      background: #1f2937;
      border: 1px solid rgba(255, 255, 255, 0.1);
      border-radius: 8px;
      box-shadow: 0 4px 20px rgba(0, 0, 0, 0.3);
      position: absolute;
      top: calc(100% + 10px);
      left: 0;
      z-index: 1000;
      display: none;
      width: 320px;
      max-height: 300px;
      overflow-y: auto;
    }

    .emoji-picker.active {
      display: block;
      animation: fadeInUp 0.3s ease-out forwards;
    }

    .emoji-btn:hover {
      background: rgba(59, 130, 246, 0.2);
      transform: scale(1.1);
    }

    .emoji-category {
      border-bottom: 1px solid rgba(255, 255, 255, 0.1);
    }

    .emoji-search {
      background: rgba(17, 24, 39, 0.8);
      border: 1px solid rgba(255, 255, 255, 0.1);
      color: #e5e7eb;
    }

    .emoji-search:focus {
      border-color: #3b82f6;
      box-shadow: 0 0 0 2px rgba(59, 130, 246, 0.2);
    }

    @keyframes fadeInUp {
      from {
        opacity: 0;
        transform: translateY(10px);
      }

      to {
        opacity: 1;
        transform: translateY(0);
      }
    }

    /* Custom scrollbar for emoji picker */
    .emoji-picker::-webkit-scrollbar {
      width: 8px;
    }

    .emoji-picker::-webkit-scrollbar-track {
      background: rgba(17, 24, 39, 0.8);
      border-radius: 4px;
    }

    .emoji-picker::-webkit-scrollbar-thumb {
      background: rgba(59, 130, 246, 0.5);
      border-radius: 4px;
    }

    .emoji-picker::-webkit-scrollbar-thumb:hover {
      background: rgba(59, 130, 246, 0.7);
    }
  </style>
</head>

<body class="min-h-screen">
  <div class="flex">
    <%- include('../layouts/admin-sidebar.ejs') %>

    <div class="flex-1 ml-64 p-8">
      <!-- Header Section -->
      <div class="flex items-center justify-between mb-8 fade-in-up">
        <h1 class="text-4xl font-bold bg-gradient-to-r from-blue-400 to-blue-600 text-transparent bg-clip-text">
          Announcements
        </h1>
        <div class="flex items-center space-x-6">
          <form class="w-full max-w-2xl announcement-form">
            <div class="relative">
              <div class="flex items-center space-x-4">
                <div class="flex-1 relative">
                  <textarea class="announcement-input w-full bg-gray-800 text-gray-100 rounded-lg p-3 border border-gray-700 focus:border-blue-500 focus:ring-2 focus:ring-blue-500 transition-all" rows="1" name="content" placeholder="Add new announcement..." required></textarea>
                </div>
                <button type="submit" class="add-announcement-btn bg-gradient-to-r from-blue-500 to-blue-600 text-white px-6 py-2 rounded-lg hover:from-blue-600 hover:to-blue-700 transition-all">
                  <i class="fas fa-plus mr-2"></i>
                  Add
                </button>
              </div>

            </div>
          </form>
        </div>
      </div>

      <!-- Announcements Table -->
      <div class="table-container fade-in-up">
        <table class="min-w-full">
          <thead>
            <tr class="text-gray-400 text-sm uppercase">
              <th class="py-4 px-6 text-left font-medium">Sl</th>
              <th class="py-4 px-6 text-left font-medium">Announcement</th>
              <th class="py-4 px-6 text-left font-medium">Date</th>
              <th class="py-4 px-6 text-left font-medium">Action</th>
            </tr>
          </thead>
          <tbody>
            <% announcements.forEach((announcement, index) => { %>
            <tr class="table-row">
              <td class="py-4 px-6 text-gray-300"><%= index + 1 %></td>
              <td class="py-4 px-6 font-medium"><%= announcement.content %></td>
              <td class="py-4 px-6 text-gray-300"><%= new Date(announcement.createdAt).toLocaleString() %></td>
              <td class="py-4 px-6">
                <div class="flex space-x-3">
                  <a href="/admin/viewAnnouncement/<%= announcement._id %>" class="action-icon view-icon">
                    <i class="fas fa-eye"></i>
                    <span class="tooltip">View Details</span>
                  </a>
                  <a href="/admin/deleteAnnouncement/<%= announcement._id %>" class="action-icon delete-icon">
                    <i class="fas fa-trash"></i>
                    <span class="tooltip">Delete Announcement</span>
                  </a>
                </div>
              </td>
            </tr>
            <% }) %>
          </tbody>
        </table>
      </div>

      <!-- No Results Message -->
      <% if (announcements.length === 0) { %>
      <div class="flex flex-col items-center justify-center py-12 fade-in-up">
        <div class="text-6xl mb-4">
          <i class="fas fa-bullhorn text-gray-500"></i>
        </div>
        <h3 class="text-xl text-gray-400 mb-2">No announcements found</h3>
        <p class="text-gray-500">Create a new announcement to get started</p>
      </div>
      <% } %>
    </div>
  </div>

  <!-- Loading Overlay -->
  <div id="loadingOverlay" class="fixed inset-0 bg-black bg-opacity-50 items-center justify-center hidden">
    <div class="bg-primary-dark p-8 rounded-lg shadow-xl">
      <div class="animate-spin rounded-full h-16 w-16 border-t-4 border-blue-500 mx-auto"></div>
      <p class="text-center mt-4 text-gray-300">Loading...</p>
    </div>
  </div>

  // Modified script section
  <script>
    document.addEventListener('DOMContentLoaded', function() {
      // Stagger animation for table rows
      const tableRows = document.querySelectorAll('.table-row');
      tableRows.forEach((row, index) => {
        row.style.opacity = '0';
        row.style.transform = 'translateY(20px)';
        setTimeout(() => {
          row.style.transition = 'all 0.3s ease';
          row.style.opacity = '1';
          row.style.transform = 'translateY(0)';
        }, 100 * index);
      });

      // Loading overlay functions
      function showLoading() {
        document.getElementById('loadingOverlay').classList.remove('hidden');
        document.getElementById('loadingOverlay').classList.add('flex');
      }

      function hideLoading() {
        document.getElementById('loadingOverlay').classList.add('hidden');
        document.getElementById('loadingOverlay').classList.remove('flex');
      }


      // Enhanced announcement input experience
      const announcementInput = document.querySelector('.announcement-input');
      const announcementForm = document.querySelector('.announcement-form');



      // Auto-resize textarea
      announcementInput.addEventListener('input', function(e) {
        this.style.height = 'auto';
        this.style.height = `${this.scrollHeight}px`;
      });

      announcementForm.addEventListener('submit', function(e) {
        e.preventDefault();
        const content = announcementInput.value.trim();

        if (content) {
          showLoading();

          // Send data to the backend using fetch
          fetch('/admin/add-announcement', {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json'
              },
              body: JSON.stringify({
                content
              })
            })
            .then(response => {
              if (!response.ok) {
                throw new Error('Failed to add announcement');
              }
              return response.json(); // If your server sends a JSON response
            })
            .then(data => {
              // Reset the form and clear input height
              announcementForm.reset();
              announcementInput.style.height = '48px';
              hideLoading();

              // Optional: Show success message
              showNotification('Announcement added successfully!');
              setTimeout(() => {
                window.location.reload()
              }, 1000)

            })
            .catch(error => {
              console.error('Error:', error);
              hideLoading();
              showNotification('Failed to add announcement. Please try again.');
            });
        }
      });


      // Notification function
      function showNotification(message) {
        const notification = document.createElement('div');
        notification.className = 'fixed top-4 right-4 bg-green-500 text-white px-6 py-3 rounded-lg shadow-lg transform transition-all duration-300 fade-in-up';
        notification.textContent = message;
        document.body.appendChild(notification);

        setTimeout(() => {
          notification.style.opacity = '0';
          setTimeout(() => notification.remove(), 300);
        }, 3000);
      }

      // Interactive action icons
      document.querySelectorAll('.action-icon').forEach(icon => {
        icon.addEventListener('mouseover', function() {
          this.style.transform = 'scale(1.1)';
          this.style.animation = 'glowPulse 1.5s infinite';
        });

        icon.addEventListener('mouseout', function() {
          this.style.transform = 'scale(1)';
          this.style.animation = 'none';
        });
      });

      // Add smooth scroll to top button
      const scrollButton = document.createElement('button');
      scrollButton.innerHTML = '<i class="fas fa-arrow-up"></i>';
      scrollButton.className = 'fixed bottom-8 right-8 bg-blue-600 p-4 rounded-full shadow-lg opacity-0 transition-all duration-300 hover:bg-blue-700 text-white';
      document.body.appendChild(scrollButton);

      window.addEventListener('scroll', () => {
        scrollButton.style.opacity = window.scrollY > 500 ? '1' : '0';
        scrollButton.style.transform = window.scrollY > 500 ? 'scale(1)' : 'scale(0)';
      });

      scrollButton.addEventListener('click', () => {
        window.scrollTo({
          top: 0,
          behavior: 'smooth'
        });
      });

    });



    document.addEventListener('DOMContentLoaded', function() {
      const emojiButton = document.getElementById('emojiButton');
      const emojiPicker = document.getElementById('emojiPicker');
      const announcementInput = document.querySelector('.announcement-input');
      const emojiSearch = document.getElementById('emojiSearch');
      const emojiBtns = document.querySelectorAll('.emoji-btn');

      // Toggle emoji picker
      emojiButton.addEventListener('click', (e) => {
        e.stopPropagation();
        emojiPicker.classList.toggle('active');
      });

      // Close emoji picker when clicking outside
      document.addEventListener('click', (e) => {
        if (!emojiPicker.contains(e.target) && e.target !== emojiButton) {
          emojiPicker.classList.remove('active');
        }
      });

      // Handle emoji selection
      emojiBtns.forEach(btn => {
        btn.addEventListener('click', (e) => {
          e.preventDefault();
          const emoji = btn.textContent;
          const start = announcementInput.selectionStart;
          const end = announcementInput.selectionEnd;
          const text = announcementInput.value;
          announcementInput.value = text.substring(0, start) + emoji + text.substring(end);
          announcementInput.focus();
          announcementInput.selectionStart = announcementInput.selectionEnd = start + emoji.length;
        });
      });

      // Search functionality
      emojiSearch.addEventListener('input', (e) => {
        const searchTerm = e.target.value.toLowerCase();
        emojiBtns.forEach(btn => {
          const emoji = btn.textContent;
          if (emoji.toLowerCase().includes(searchTerm)) {
            btn.style.display = 'block';
          } else {
            btn.style.display = 'none';
          }
        });
      });

      // Auto-resize textarea
      announcementInput.addEventListener('input', function() {
        this.style.height = 'auto';
        this.style.height = this.scrollHeight + 'px';
      });
    });
  </script>
</body>

</html>