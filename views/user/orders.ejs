<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Yadro - All Orders</title>
  <script src="https://cdn.tailwindcss.com"></script>
  <link rel="icon" href="/images/logo.png" type="image/x-icon">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
  <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@20..48,100..700,0..1,-50..200" />
  <script src="https://cdnjs.cloudflare.com/ajax/libs/gsap/3.11.4/gsap.min.js"></script>
  <style>
    @keyframes shimmer {
      0% {
        background-position: -1000px 0;
      }

      100% {
        background-position: 1000px 0;
      }
    }

    .animate-shimmer {
      animation: shimmer 2s infinite linear;
      background: linear-gradient(to right, #f6f7f8 8%, #edeef1 18%, #f6f7f8 33%);
      background-size: 1000px 100%;
    }

    .order-item {
      opacity: 0;
      transform: translateY(20px);
    }

    @keyframes gradient {
      0% {
        background-position: 0% 50%;
      }

      50% {
        background-position: 100% 50%;
      }

      100% {
        background-position: 0% 50%;
      }
    }

    .gradient-bg {
      background: linear-gradient(-45deg, #ee7752, #e73c7e, #23a6d5, #23d5ab);
      background-size: 400% 400%;
      animation: gradient 15s ease infinite;
    }

    /* Enhanced product display styles */
    .product-stack:hover {
      cursor: pointer;
    }

    .product-image {
      transition: transform 0.3s ease, z-index 0.3s ease;
    }

    .product-image:hover {
      transform: translateY(-4px) scale(1.05);
      z-index: 10;
    }

    .products-modal {
      backdrop-filter: blur(4px);
    }

    .modal-content {
      max-height: calc(100vh - 200px);
      overflow-y: auto;
    }

    .modal-content::-webkit-scrollbar {
      width: 6px;
    }

    .modal-content::-webkit-scrollbar-track {
      background: transparent;
    }

    .modal-content::-webkit-scrollbar-thumb {
      background-color: #E5E7EB;
      border-radius: 3px;
    }

    @keyframes progress {
      0% {
        width: 0;
      }

      100% {
        width: 100%;
      }
    }

    .progress-bar {
      animation: progress 30s linear;
    }

    @keyframes shake {

      0%,
      100% {
        transform: translateX(0);
      }

      25% {
        transform: translateX(-5px);
      }

      75% {
        transform: translateX(5px);
      }
    }

    .shake {
      animation: shake 0.5s cubic-bezier(0.36, 0.07, 0.19, 0.97) both;
    }

    .modal-enter {
      animation: modalEnter 0.3s ease-out forwards;
    }

    @keyframes modalEnter {
      from {
        opacity: 0;
        transform: scale(0.95) translateY(10px);
      }

      to {
        opacity: 1;
        transform: scale(1) translateY(0);
      }
    }
  </style>
</head>

<body class="bg-gray-50 min-h-screen flex flex-col">
  <!-- Header -->
  <%- include('../layouts/header-with-user.ejs') %>

  <!-- Main Content -->
  <main class="flex-grow container mx-auto py-12 px-4 sm:px-6 lg:px-8">
    <!-- Breadcrumb -->
    <div class="border-b border-gray-200 pb-4 mb-8">
      <nav class="flex" aria-label="Breadcrumb">
        <ol class="flex items-center space-x-4">
          <li>
            <div>
              <a href="#" class="text-gray-400 hover:text-gray-500">Home</a>
            </div>
          </li>
          <li>
            <div class="flex items-center">
              <svg class="flex-shrink-0 h-5 w-5 text-gray-300" fill="currentColor" viewBox="0 0 20 20" aria-hidden="true">
                <path d="M5.555 17.776l8-16 .894.448-8 16-.894-.448z" />
              </svg>
              <a href="#" class="ml-4 text-sm font-medium text-gray-500 hover:text-gray-700">My Orders</a>
            </div>
          </li>
        </ol>
      </nav>
    </div>

    <div class="table-container p-6 rounded-xl shadow-lg mx-auto max-w-9xxl bg-white">
      <!-- Table header with search and filters -->
      <div class="mb-6 flex flex-wrap items-center justify-between gap-4">
        <h2 class="text-2xl font-bold text-gray-800">
          My Orders
          <span class="ml-2 text-sm font-normal text-gray-500">
            (Showing <%= orders.length %> orders)
          </span>
        </h2>

        <div class="flex gap-4">
          <div class="relative">
            <input type="text" placeholder="Search orders..." id="searchInput" class="pl-10 pr-4 py-2 border border-gray-200 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent outline-none transition-all duration-300">
            <svg class="w-5 h-5 text-gray-400 absolute left-3 top-1/2 transform -translate-y-1/2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
            </svg>
          </div>

          <select id="statusFilter" class="px-4 py-2 border border-gray-200 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent outline-none transition-all duration-300">
            <option value="">All Status</option>
            <option value="placed">Placed</option>
            <option value="delivered">Delivered</option>
            <option value="cancelled">Cancelled</option>
          </select>
        </div>
      </div>

      <!-- Table wrapper -->
      <div class="overflow-x-auto custom-scrollbar">
        <table class="w-full min-w-[1200px] border-collapse">
          <!-- Table Header -->
          <thead>
            <tr class=" bg-gradient-to-r from-gray-50 to-gray-100">
              <th class="px-6 py-4 text-center text-sm font-semibold text-gray-600 uppercase tracking-wider rounded-tl-lg">Order</th>
              <th class="px-6 py-4 text-center text-sm font-semibold text-gray-600 uppercase tracking-wider">Products</th>
              <th class="px-6 py-4 text-center text-sm font-semibold text-gray-600 uppercase tracking-wider">Total Items</th>
              <th class="px-6 py-4 text-center text-sm font-semibold text-gray-600 uppercase tracking-wider">Price</th>
              <th class="px-6 py-4 text-center text-sm font-semibold text-gray-600 uppercase tracking-wider">Discount</th>
              <th class="px-6 py-4 text-center text-sm font-semibold text-gray-600 uppercase tracking-wider">Coupon Used</th>
              <th class="px-6 py-4 text-center text-sm font-semibold text-gray-600 uppercase tracking-wider">Total</th>
              <th class="px-6 py-4 text-center text-sm font-semibold text-gray-600 uppercase tracking-wider">Status</th>
              <th class="px-6 py-4 text-center text-sm font-semibold text-gray-600 uppercase tracking-wider rounded-tr-lg">Actions</th>
            </tr>
          </thead>

          <!-- Table Body -->
          <tbody class="divide-y divide-gray-100">
            <% orders.forEach((order, orderIndex) => { %>
            <!-- Order Group Header -->
            <tr class="bg-blue-50/50">
              <td colspan="9" class="px-6 py-4">
                <div class="flex items-center justify-between">
                  <div class="flex items-center gap-4">
                    <span class="text-sm font-semibold text-gray-900">
                      Order #<%= order._id %>
                    </span>
                    <span class="text-sm text-gray-500">
                      <%= new Date(order.orderDate).toLocaleDateString('en-US', { 
                          year: 'numeric', 
                          month: 'long', 
                          day: 'numeric',
                          hour: '2-digit',
                          minute: '2-digit'
                        }) %>
                    </span>
                  </div>
                  <div class="flex items-center gap-2">
                    <span class="px-3 py-1 text-xs font-medium rounded-full
                        <%= order.paymentStatus === 'Paid' ? 'bg-green-100 text-green-800' : 'bg-yellow-100 text-yellow-800' %>">
                      <%= order.paymentStatus %>
                    </span>
                  </div>
                </div>
              </td>
            </tr>

            <!-- Order Details -->
            <tr class="hover:bg-gray-50 transition-colors duration-200" data-order-id="<%= order._id %>">
              <td class="px-6 py-4 whitespace-nowrap">
                <span class="text-sm text-gray-500">#<%= orderIndex + 1 %></span>
              </td>

              <!-- Enhanced Product Display Cell -->
              <td class="px-6 py-4">
                <a href="/order-tracking/<%= order._id %>">
                  <div class="flex items-center gap-4 product-stack" onclick="openProductsModal('<%= order._id %>')">
                    <div class="flex -space-x-3 relative">
                      <% 
                      const maxDisplayProducts = 3;
                      const products = order.items;
                      const displayProducts = products.slice(0, maxDisplayProducts);
                      const remainingProducts = products.length - maxDisplayProducts;
                      %>

                      <% displayProducts.forEach((product, idx) => { %>
                      <div class="product-image relative group">
                        <div class="w-12 h-12 rounded-lg bg-white border-2 border-white shadow-sm overflow-hidden">
                          <% if (product.productId.images && product.productId.images.length > 0) { %>
                          <img src="<%= product.productId.images[0] %>" alt="<%= product.productId.name %>" class="w-full h-full object-cover">
                          <% } else { %>
                          <div class="w-full h-full bg-gray-100 flex items-center justify-center">
                            <svg class="w-6 h-6 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z" />
                            </svg>
                          </div>
                          <% } %>
                        </div>
                        <!-- Tooltip -->
                        <div class="absolute bottom-full left-1/2 transform -translate-x-1/2 mb-2 px-2 py-1 bg-gray-900 text-white text-xs rounded opacity-0 invisible group-hover:opacity-100 group-hover:visible transition-all duration-200 whitespace-nowrap z-20">
                          <%= product.productId.name %>
                        </div>
                      </div>
                      <% }); %>

                      <% if (remainingProducts > 0) { %>
                      <div class="product-image w-12 h-12 rounded-lg bg-gray-100 border-2 border-white shadow-sm flex items-center justify-center">
                        <span class="text-sm font-medium text-gray-600">+<%= remainingProducts %></span>
                      </div>
                      <% } %>
                    </div>

                    <div class="flex flex-col">
                      <div class="text-sm font-medium text-gray-900">
                        <%= displayProducts[0].productId.name %>
                        <% if (products.length > 1) { %>
                        <span class="text-xs text-gray-500">and <%= products.length - 1 %> more</span>
                        <% } %>
                      </div>
                      <div class="text-xs text-gray-500">Click to view all</div>
                    </div>
                  </div>
                </a>
              </td>

              <td class="px-6 py-4 whitespace-nowrap">
                <span class="text-sm text-gray-900">
                  <%= order.items.reduce((acc, item) => acc + item.quantity, 0) %>
                </span>
              </td>

              <td class="px-6 py-4 whitespace-nowrap">
                <div class="text-sm text-gray-900">₹<%= order.totalAmount %></div>
              </td>

              <td class="px-6 py-4 whitespace-nowrap">
                <% if(order.offerApplied > 0) { %>
                <div class="text-sm text-green-500">- ₹<%= order.offerApplied %></div>
                <% } else { %>
                <div class="text-sm text-green-500">No Discount</div>
                <% } %>
              </td>

              <td class="px-6 py-4 whitespace-nowrap">
                <span class="status-badge px-3 py-1 text-xs font-medium rounded-full inline-flex items-center gap-1 bg-orange-100 text-orange-800">
                  <!-- <span class="w-1.5 h-1.5 rounded-full bg-orange-500"></span> -->
                  <% if(order.couponApplied !== null) { %>
                  <%= order.couponApplied.code %>
                  <% } else { %>
                  No Coupons
                  <% } %>
                </span>
              </td>

              <td class="px-6 py-4 whitespace-nowrap">
                <div class="text-sm font-medium text-gray-900">
                  ₹<%= order.totalAmount - order.offerApplied %>
                </div>
              </td>

              <td class="px-6 py-4 whitespace-nowrap">
                <span class="status-badge px-3 py-1 text-xs font-medium rounded-full inline-flex items-center gap-1
                                      <%= order.orderStatus === 'Placed' ? 'bg-yellow-100 text-yellow-800' : 
                                         order.orderStatus === 'Delivered' ? 'bg-green-100 text-green-800' : 
                                         'bg-red-100 text-red-800' %>">
                  <span class="w-1.5 h-1.5 rounded-full 
                                          <%= order.orderStatus === 'Placed' ? 'bg-yellow-500' :
                                             order.orderStatus === 'Delivered' ? 'bg-green-500' :
                                             'bg-red-500' %>">
                  </span>
                  <%= order.orderStatus %>
                </span>
              </td>

              <td class="px-6 py-4 whitespace-nowrap">
                <div class="flex items-center gap-3">
                  <a href="/order-tracking/<%= order._id %>" class="inline-flex items-center px-3 py-1.5 text-sm font-medium text-blue-600 hover:text-blue-800 transition-colors duration-200">
                    <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2m-3 7h3m-3 4h3m-6-4h.01M9 16h.01" />
                    </svg>
                    Track
                  </a>

                  <% if (order.orderStatus !== "Cancelled" && order.orderStatus !== "Delivered") { %>
                  <button id="openModal" data-order-id="<%= order._id %>" class="inline-flex items-center px-3 py-1.5 text-sm font-medium text-red-600 hover:text-red-800 transition-colors duration-200">
                    <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                    </svg>
                    Cancel
                  </button>
                  <% } %>

                  <% if (order.orderStatus === "Delivered") { %>
                  <a href="/order/return/<%= order._id %>" class="inline-flex items-center px-3 py-1.5 text-sm font-medium text-purple-600 hover:text-purple-800 transition-colors duration-200">
                    <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 15v-1a4 4 0 00-4-4H8m0 0l3 3m-3-3l3-3" />
                    </svg>
                    Return
                  </a>
                  <% } %>

                  <!-- New Button: Download Invoice -->
                  <% if (order.orderStatus === "Delivered") { %>
                  <a href="/order/invoice/<%= order._id %>" class="inline-flex items-center px-3 py-1.5 text-sm font-medium text-green-600 hover:text-green-800 transition-colors duration-200">
                    <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                    </svg>
                    Download Invoice
                  </a>
                  <% } %>
                </div>
              </td>
            </tr>
            <% }); %>
          </tbody>
        </table>
      </div>

      <!-- Empty State -->
      <% if (orders.length === 0) { %>
      <div class="flex flex-col items-center justify-center py-12">
        <div class="w-40 h-40 mb-6">
          <img src="/images/forgotman.png" alt="No orders" class="w-full h-full object-contain">
        </div>
        <h3 class="text-xl font-semibold text-gray-900 mb-2">No Orders Yet</h3>
        <p class="text-gray-500 mb-6 text-center">Start shopping and your orders will appear here</p>
        <a href="/products" class="inline-flex items-center px-6 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition duration-200">
          Browse Products
        </a>
      </div>
      <% } %>
    </div>
  </main>

  <!-- Cancellation Modal -->
  <div id="cancellationModal" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center opacity-0 invisible transition-opacity duration-300">
    <div class="bg-white rounded-lg shadow-2xl w-full max-w-md transform scale-95 transition-transform duration-300">
      <div class="gradient-bg h-2 rounded-t-lg"></div>
      <div class="p-6">
        <h3 class="text-2xl font-bold text-gray-900 mb-4">Cancel Your Order</h3>
        <p class="text-gray-600 mb-6">We're sorry to see you cancel. Please tell us why you're canceling so we can improve our service.</p>
        <select id="cancellationReason" class="w-full px-3 py-2 text-gray-700 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 transition duration-300 mb-4">
          <option value="">Select a reason</option>
          <option value="Changed my mind">Changed my mind</option>
          <option value="Found a better price elsewhere">Found a better price elsewhere</option>
          <option value="Shipping time too long">Shipping time too long</option>
          <option value="Ordered by mistake">Ordered by mistake</option>
          <option value="Other">Other</option>
        </select>
        <textarea id="cancellationComment" class="w-full px-3 py-2 text-gray-700 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 transition duration-300 mb-6" rows="4" placeholder="Additional comments (optional)"></textarea>
        <div class="flex justify-end space-x-4">
          <button id="cancelBtn" class="px-4 py-2 bg-gray-200 text-gray-800 rounded-lg hover:bg-gray-300 transition duration-300">
            Never Mind
          </button>
          <button id="confirmCancelBtn" class="px-4 py-2 bg-red-500 text-white rounded-lg hover:bg-red-600 transition duration-300">
            Confirm Cancellation
          </button>
        </div>
      </div>
    </div>
  </div>

  <!-- Add this modal HTML just before closing body tag -->
  <div id="returnModal" class="fixed inset-0 z-50 hidden">
    <!-- Backdrop -->
    <div class="fixed inset-0 bg-black/50 backdrop-blur-sm transition-opacity duration-300 opacity-0" id="modalBackdrop"></div>

    <!-- Modal -->
    <div class="fixed left-1/2 top-1/2 -translate-x-1/2 -translate-y-1/2 w-full max-w-md scale-95 opacity-0 transition-all duration-300" id="modalContent">
      <div class="bg-white rounded-lg shadow-xl overflow-hidden">
        <!-- Header -->
        <div class="px-6 py-4 border-b border-gray-200">
          <div class="flex items-center justify-between">
            <h3 class="text-lg font-medium text-gray-900">Return Order Request</h3>
            <button onclick="closeReturnModal()" class="text-gray-400 hover:text-gray-500 transition-colors">
              <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
              </svg>
            </button>
          </div>
        </div>

        <!-- Form -->
        <form id="returnForm" class="px-6 py-4 space-y-4">
          <input type="hidden" id="orderId" name="orderId">

          <!-- Items Selection -->
          <div class="space-y-2">
            <label class="block text-sm font-medium text-gray-700">Select Items to Return</label>
            <div id="orderItems" class="space-y-2 max-h-40 overflow-y-auto"></div>
          </div>

          <!-- Reason Selection -->
          <div class="space-y-2">
            <label class="block text-sm font-medium text-gray-700">Reason for Return</label>
            <select name="reason" required class="w-full rounded-md border-gray-300 shadow-sm focus:border-purple-500 focus:ring-purple-500">
              <option value="">Select a reason</option>
              <option value="wrong_item">Wrong Item Received</option>
              <option value="defective">Item is Defective</option>
              <option value="not_as_described">Item Not as Described</option>
              <option value="size_issue">Size/Fit Issue</option>
              <option value="changed_mind">Changed My Mind</option>
            </select>
          </div>

          <!-- Additional Comments -->
          <div class="space-y-2">
            <label class="block text-sm font-medium text-gray-700">Additional Comments</label>
            <textarea name="comments" rows="3" class="w-full rounded-md border-gray-300 shadow-sm focus:border-purple-500 focus:ring-purple-500"></textarea>
          </div>

          <!-- Submit Button -->
          <div class="flex justify-end pt-4">
            <button type="submit" class="inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-purple-600 hover:bg-purple-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-purple-500 transition-colors duration-200">
              Submit Return Request
            </button>
          </div>
        </form>
      </div>
    </div>
  </div>

  <!-- Footer -->
  <%- include('../layouts/footer.ejs') %>

  <script src="/js/loadingAnimation.js"></script>
  <script src="/js/successMessage.js"></script>
  <script>
    document.addEventListener('DOMContentLoaded', () => {
      // Product cell click handler
      const productCells = document.querySelectorAll('.flex.-space-x-2');
      const modals = document.querySelectorAll('.products-modal');
      const closeButtons = document.querySelectorAll('.close-modal');

      productCells.forEach((cell, index) => {
        cell.addEventListener('click', () => {
          const modal = modals[index];
          modal.classList.remove('hidden');
          setTimeout(() => {
            modal.querySelector('.bg-white').style.transform = 'scale(1)';
            modal.querySelector('.bg-white').style.opacity = '1';
          }, 10);
        });
      });

      closeButtons.forEach(button => {
        button.addEventListener('click', (e) => {
          const modal = e.target.closest('.products-modal');
          const content = modal.querySelector('.bg-white');
          content.style.transform = 'scale(0.95)';
          content.style.opacity = '0';
          setTimeout(() => {
            modal.classList.add('hidden');
          }, 300);
        });
      });

      // Close modal when clicking outside
      modals.forEach(modal => {
        modal.addEventListener('click', (e) => {
          if (e.target === modal) {
            const content = modal.querySelector('.bg-white');
            content.style.transform = 'scale(0.95)';
            content.style.opacity = '0';
            setTimeout(() => {
              modal.classList.add('hidden');
            }, 300);
          }
        });
      });

      // Add hover animations for product images
      const productImages = document.querySelectorAll('.flex.-space-x-2 > div');
      productImages.forEach(image => {
        image.addEventListener('mouseenter', () => {
          gsap.to(image, {
            y: -4,
            duration: 0.2,
            ease: "power2.out"
          });
        });

        image.addEventListener('mouseleave', () => {
          gsap.to(image, {
            y: 0,
            duration: 0.2,
            ease: "power2.out"
          });
        });
      });
    });




    const badges = document.querySelectorAll('.status-badge');
    badges.forEach(badge => {
      badge.addEventListener('mouseover', () => {
        badge.style.transform = 'scale(1.05)';
        badge.style.transition = 'transform 0.2s ease';
      });

      badge.addEventListener('mouseout', () => {
        badge.style.transform = 'scale(1)';
      });
    });


    const modal = document.getElementById('cancellationModal');
    const modalContent = modal.querySelector('.bg-white');
    const cancelBtn = document.getElementById('cancelBtn');
    const confirmCancelBtn = document.getElementById('confirmCancelBtn');
    const reasonSelect = document.getElementById('cancellationReason');
    const commentTextarea = document.getElementById('cancellationComment');

    let currentOrderId; // Variable to store current order ID


    // Function to open modal
    function openModal(orderId) {
      currentOrderId = orderId;
      modal.classList.remove('invisible');
      gsap.to(modal, {
        opacity: 1,
        duration: 0.3,
        ease: "power2.out"
      });
      gsap.to(modalContent, {
        scale: 1,
        opacity: 1,
        duration: 0.3,
        ease: "back.out(1.7)"
      });
    }

    // Function to close modal
    function closeModal() {
      gsap.to(modalContent, {
        scale: 0.95,
        opacity: 0,
        duration: 0.2,
        ease: "power2.in"
      });
      gsap.to(modal, {
        opacity: 0,
        duration: 0.2,
        ease: "power2.in",
        onComplete: () => {
          modal.classList.add('invisible');
          reasonSelect.value = "";
          commentTextarea.value = "";
        }
      });
    }

    // Add event listeners
    document.addEventListener('DOMContentLoaded', () => {
      // Attach event listeners to all cancel order buttons
      document.querySelectorAll('#openModal').forEach(btn => {
        btn.addEventListener('click', (e) => {
          // Get the order ID from the closest tr element's data attribute
          const orderId = e.target.closest('tr').dataset.orderId;
          openModal(orderId);
          console.log("open model order id ==> ", orderId);
        });
      });

      // Cancel button event listener
      cancelBtn.addEventListener('click', closeModal);

      // Confirm cancellation button event listener
      confirmCancelBtn.addEventListener('click', () => {
        if (reasonSelect.value) {
          const reason = reasonSelect.value;
          const comments = commentTextarea.value;

          // Call the cancelOrder function with the current order ID and reason
          cancelOrder(currentOrderId, reason, comments);
        } else {
          // Shake animation for invalid selection
          gsap.to(reasonSelect, {
            x: [-10, 10, -10, 10, 0],
            duration: 0.5,
            ease: "power2.inOut"
          });
          reasonSelect.classList.add('ring-2', 'ring-red-500');
          setTimeout(() => reasonSelect.classList.remove('ring-2', 'ring-red-500'), 2000);
        }
      });

      // Close modal when clicking outside
      modal.addEventListener('click', (e) => {
        if (e.target === modal) {
          closeModal();
        }
      });
    });

    // Enhanced cancel order function
    function cancelOrder(orderId, reason, comments) {

      function getFormattedDateTime() {
        const now = new Date();
        const options = {
          year: 'numeric',
          month: 'long',
          day: 'numeric',
          hour: 'numeric',
          minute: 'numeric',
          hour12: true
        };

        return now.toLocaleString('en-US', options);
      }
      const loadingOverlay = showLoadingAnimation();
      console.log('order cancel request ', orderId, reason, comments)
      fetch(`/order/cancel/${orderId}`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            reason: reason,
            comments: comments,
            cancelDate: getFormattedDateTime()
          })
        })
        .then(response => {
          hideLoadingAnimation(loadingOverlay);
          if (response.ok) {
            closeModal();
            showSuccessMessage({
              title: 'Order Cancelled !!',
              message: 'Your order has been cancelled successfully.',
              buttonText: 'Show Order Details',
              details: {
                'Order ID': orderId,
                'Reason': reason,
                'Comments': comments,
                'Date': getFormattedDateTime()
              },
              onButtonClick: () => {
                window.location.href = `/order-tracking/${orderId}`
              },
              autoClose: false // Close after 7 seconds
            });

            // Animate and remove the cancelled order row
            const cancelledRow = document.querySelector(`tr[data-order-id="${orderId}"]`);
            if (cancelledRow) {
              gsap.to(cancelledRow, {
                backgroundColor: '#FEE2E2',
                color: '#991B1B',
                duration: 0.5,
                ease: "power2.inOut",
                onComplete: () => {
                  setTimeout(() => {
                    gsap.to(cancelledRow, {
                      opacity: 0,
                      height: 0,
                      duration: 0.5,
                      ease: "power2.inOut",
                      onComplete: () => {
                        cancelledRow.remove();
                        // // Reload the page if needed
                        // location.reload();
                      }
                    });
                  }, 1000);
                }
              });
            }
          } else {
            throw new Error('Failed to cancel order');
          }
        })
        .catch(error => {
          hideLoadingAnimation(loadingOverlay);
          console.error("Error:", error);
          showErrorMessage('An error occurred. Please try again.');
        });
    }
  </script>
</body>

</html>