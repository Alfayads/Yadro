<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Yadro - Your Cart</title>
  <script src="https://cdn.tailwindcss.com"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/gsap/3.9.1/gsap.min.js"></script>
  <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" rel="stylesheet">
  <link rel="stylesheet" href="/css/like-button.css">
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css">


  <style>
    @import url('https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700&display=swap');

    body {
      font-family: 'Poppins', sans-serif;
    }

    .cart-item {
      @apply transition-all duration-300 ease-in-out;
    }

    .cart-item:hover {
      @apply transform -translate-y-1;
    }

    .quantity-control {
      transition: all 0.3s ease;
    }

    .quantity-control:hover {
      box-shadow: 0 0 15px rgba(0, 0, 0, 0.1);
    }

    .quantity-btn {
      transition: all 0.2s ease;
    }

    .quantity-btn:hover {
      transform: scale(1.1);
    }

    .quantity-input {
      -moz-appearance: textfield;
    }

    .quantity-input::-webkit-outer-spin-button,
    .quantity-input::-webkit-inner-spin-button {
      -webkit-appearance: none;
      margin: 0;
    }

    .delete-button {
      @apply transition-all duration-300 ease-in-out;
    }

    .delete-button:hover {
      @apply transform scale-110;
    }
  </style>
</head>

<body class="bg-gray-50 min-h-screen flex flex-col">
  <!-- Header would go here -->
  <%- include('../layouts/header-with-user.ejs') %>


  <main class="flex-grow container mx-auto px-4 py-8">
    <div class="bg-white rounded-2xl shadow-lg overflow-hidden">
      <div class="p-6 sm:p-10">
        <h2 class="text-3xl font-bold mb-6 text-gray-800">My Cart</h2>

        <!-- Progress bar -->
        <div class="mb-8">
          <div class="flex justify-between mb-2">
            <span class="text-sm font-medium text-gray-500">Progress to Free Shipping</span>
            <span class="text-sm font-medium text-red-600" id="remaining-amount">₹10000 more to go</span>
          </div>
          <div class="w-full bg-gray-200 rounded-full h-2.5">
            <div class="progress-bar bg-red-600 h-2.5 rounded-full" style="width: 65%"></div>
          </div>
        </div>

        <div class="space-y-6">
          <!-- Cart Items -->
          <% if (cartItems.length > 0) { %>
          <% cartItems.forEach(product => { %>
          <div class="cart-item flex items-center bg-white rounded-xl p-6 shadow-sm hover:shadow-md transition-shadow duration-300">
            <img src="<%= product.images[0] %>" alt="<%= product.name %>" class="w-24 h-24 object-cover rounded-lg mr-6">
            <div class="flex-grow">
              <h3 class="text-lg font-semibold text-gray-800 mb-1"><%= product.name %></h3>
              <p class="text-sm text-gray-500 line-clamp-2 mb-2"><%= product.description %></p>
              <div class="flex items-center justify-between">
                <!-- Quantity Control -->
                <div class="quantity-control inline-flex items-center bg-gray-100 rounded-full p-1 shadow-sm">
                  <button class="quantity-btn decrease w-8 h-8 flex items-center justify-center bg-white rounded-full text-red-500 hover:bg-red-100 transition-colors duration-200 focus:outline-none focus:ring-2 focus:ring-red-400" data-product-id="<%= product.productId %>">
                    <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20 12H4"></path>
                    </svg>
                  </button>
                  <input type="number" maxlength="10" minlength="1" class="quantity-input w-12 text-center bg-transparent font-semibold text-gray-700 focus:outline-none" value="<%= product.quantity %>" min="1" max="99" data-product-id="<%= product.productId %>">
                  <button class="quantity-btn increase w-8 h-8 flex items-center justify-center bg-white rounded-full text-green-500 hover:bg-green-100 transition-colors duration-200 focus:outline-none focus:ring-2 focus:ring-green-400" data-product-id="<%= product.productId %>">
                    <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
                    </svg>
                  </button>
                </div>
                <span class="font-semibold text-gray-800 text-xl">₹ <span class="product-total-price"><%= Math.round(product.totalPrice) %></span></span>
              </div>
            </div>
            <button class="delete-button ml-4 text-gray-400 hover:text-red-500 transition-colors duration-200" data-product-id="<%= product.productId %>">
              <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
              </svg>
            </button>
          </div>
          <% }) %>
          <% } else { %>
          <div class="flex flex-col items-center justify-center py-12 px-4 mb-5 sm:px-6 lg:px-8 bg-white rounded-lg shadow-md">
            <img src="/images/forgotman.png" alt="Empty Cart" class="w-48 h-48 mb-8" />
            <h2 class="text-3xl font-extrabold text-gray-900 mb-4">Your Cart is Empty</h2>
            <p class="text-xl text-gray-600 mb-8 text-center max-w-md">Discover and save items you love to your Cart. Start exploring our products now!</p>
            <a href="/products" class="inline-flex items-center px-6 py-3 border border-transparent text-base font-medium rounded-md text-white bg-red-600 hover:bg-red-700 transition duration-150 ease-in-out">
              <svg class="mr-2 -ml-1 w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
              </svg>
              Explore Products
            </a>
          </div>
          <% } %>

          <!-- Order Summary -->
          <div class="mt-10 flex flex-col md:flex-row justify-between items-start">
            <div class="w-full md:w-5/12">
              <div class="bg-gray-50 p-6 rounded-xl">
                <h3 class="text-lg font-semibold mb-4">Order Summary</h3>
                <div class="space-y-2 my-10">
                  <div class="flex justify-between">
                    <span class="text-gray-600">Subtotal</span>
                    <span class="font-medium">₹ <%= Math.round(totalPrice) %></span>
                  </div>
                  <div class="flex justify-between">
                    <span class="text-gray-600">Shipping</span>
                    <span class="text-green-600 font-medium" id="shipping-charge">Free</span>
                  </div>
                  <div class="border-t pt-2 mt-2">
                    <div class="flex justify-between">
                      <span class="font-semibold">Total</span>
                      <span class="font-bold text-xl" id="total-order-value">₹ <%= Math.round(totalPrice) %></span>
                    </div>
                  </div>
                </div>
                <% if(cartItems.length > 0)  { %>
                <a href="/cart/check-out" class="checkout-button w-full bg-red-600 text-white font-semibold py-3 px-4 rounded-lg mt-6 hover:bg-red-700 transition-colors duration-300 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500">
                  Proceed to Checkout
                </a>
                <% } else { %>
                <a href="/products" class="checkout-button w-full bg-red-600 text-white font-semibold py-3 px-4 rounded-lg mt-6 hover:bg-red-700 transition-colors duration-300 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500">
                  Go to Products
                </a>
                <% } %>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </main>

  <!-- Footer would go here -->
  <%- include('../layouts/footer.ejs') %>

  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
  <script src="https://cdn.jsdelivr.net/npm/canvas-confetti@1.4.0"></script>
  <script>
    document.addEventListener('DOMContentLoaded', () => {
      // Constants
      const FREE_SHIPPING_THRESHOLD = 50000; // ₹50,000
      const BASE_SHIPPING_CHARGE = 400; // ₹400
      const MIN_QUANTITY = 1;
      const MAX_QUANTITY = 10;

      // DOM Elements
      const elements = {
        progressBar: document.querySelector('.progress-bar'),
        remainingAmount: document.getElementById('remaining-amount'),
        shippingCharge: document.getElementById('shipping-charge'),
        totalOrderValue: document.getElementById('total-order-value'),
        quantityControls: document.querySelectorAll('.quantity-control'),
        deleteButtons: document.querySelectorAll('.delete-button'),
        checkoutButton: document.querySelector('.checkout-button'),
        cartItems: document.querySelectorAll('.cart-item')
      };

      let freeShippingActivated = false;

      // Utility functions for precise calculations
      const formatCurrency = (amount) => {
        return new Intl.NumberFormat('en-IN', {
          style: 'currency',
          currency: 'INR',
          minimumFractionDigits: 0,
          maximumFractionDigits: 0
        }).format(amount).replace('₹', '₹ ');
      };

      const parsePrice = (priceString) => {
        return parseFloat(priceString.replace(/[^0-9.-]+/g, ''));
      };

      // Calculate total cart value with precision
      const calculateCartValue = () => {
        try {
          return Array.from(elements.cartItems).reduce((total, item) => {
            const price = parsePrice(item.querySelector('.product-total-price').textContent);
            return total + (Number.isNaN(price) ? 0 : price);
          }, 0);
        } catch (error) {
          console.error('Error calculating cart value:', error);
          return 0;
        }
      };

      // Calculate current shipping charge
      const getCurrentShippingCharge = () => {
        const totalCartValue = calculateCartValue();
        return totalCartValue >= FREE_SHIPPING_THRESHOLD ? 0 : BASE_SHIPPING_CHARGE;
      };

      // Update shipping and total with precise calculations
      const updateShippingCharge = (shippingCharge) => {
        try {
          const totalCartValue = calculateCartValue();
          elements.shippingCharge.textContent = formatCurrency(shippingCharge);
          elements.totalOrderValue.textContent = formatCurrency(totalCartValue + shippingCharge);
        } catch (error) {
          console.error('Error updating shipping charge:', error);
        }
      };

      // Progress bar and free shipping management with improved accuracy
      const updateProgressBar = () => {
        try {
          const totalCartValue = calculateCartValue();
          const remainingAmount = Math.max(0, FREE_SHIPPING_THRESHOLD - totalCartValue);
          const progressPercentage = Math.min(100, (totalCartValue / FREE_SHIPPING_THRESHOLD) * 100);

          // Update UI elements
          elements.remainingAmount.textContent = `${formatCurrency(remainingAmount)} more to go`;
          elements.progressBar.style.width = `${progressPercentage}%`;

          // Handle free shipping activation/deactivation
          if (progressPercentage >= 100 && !freeShippingActivated) {
            elements.progressBar.classList.replace('bg-red-600', 'bg-green-600');
            freeShippingActivated = true;
            updateShippingCharge(0);
            showFreeShippingSuccess();
          } else if (progressPercentage < 100) {
            if (freeShippingActivated) {
              elements.progressBar.classList.replace('bg-green-600', 'bg-red-600');
              freeShippingActivated = false;
            }
            updateShippingCharge(BASE_SHIPPING_CHARGE);
          }
        } catch (error) {
          console.error('Error updating progress bar:', error);
        }
      };

      // Improved quantity validation
      const validateAndUpdateQuantity = (newQuantity) => {
        const quantity = parseInt(newQuantity);
        if (!Number.isInteger(quantity)) return false;
        if (quantity < MIN_QUANTITY || quantity > MAX_QUANTITY) {
          Swal.fire({
            icon: 'warning',
            title: 'Invalid Quantity',
            text: `Quantity must be between ${MIN_QUANTITY} and ${MAX_QUANTITY}.`,
            confirmButtonText: 'OK'
          });
          return false;
        }
        return true;
      };

      // Enhanced quantity update handler with proper error handling
      const handleQuantityUpdate = async (productId, newQuantity, quantityInput) => {
        try {
          if (!validateAndUpdateQuantity(newQuantity)) {
            return false;
          }

          const currentShippingCharge = getCurrentShippingCharge();

          const response = await fetch('/cart/update-quantity', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({
              productId,
              quantity: newQuantity,
              shippingCharge: currentShippingCharge
            })
          });

          const data = await response.json();

          if (!data.success) {
            throw new Error(data.message || 'Failed to update quantity');
          }

          // Update UI with new price
          const cartItem = quantityInput.closest('.cart-item');
          const totalPriceElement = cartItem.querySelector('.product-total-price');

          // Update the quantity input value
          quantityInput.value = newQuantity;

          // Animate the price update
          gsap.to(totalPriceElement, {
            textContent: Math.round(data.newTotalPrice),
            duration: 0.5,
            ease: 'power2.out',
            snap: {
              textContent: 1
            },
            onComplete: () => {
              totalPriceElement.textContent = Math.round(data.newTotalPrice);
              updateProgressBar();
            }
          });

          return true;
        } catch (error) {
          console.error('Error updating quantity:', error);
          Swal.fire({
            icon: 'error',
            title: 'Update Failed',
            text: 'Failed to update quantity. Please try again.',
            confirmButtonText: 'OK'
          });
          return false;
        }
      };

      // Initialize quantity controls with improved event handling
      const initializeQuantityControls = () => {
        elements.quantityControls.forEach(control => {
          const input = control.querySelector('.quantity-input');
          const decreaseBtn = control.querySelector('.decrease');
          const increaseBtn = control.querySelector('.increase');
          const productId = input.dataset.productId;

          // Decrease quantity
          decreaseBtn.addEventListener('click', async () => {
            const currentValue = parseInt(input.value);
            const newValue = currentValue - 1;
            if (await handleQuantityUpdate(productId, newValue, input)) {
              gsap.from(input, {
                scale: 1.2,
                duration: 0.3,
                ease: 'power2.out'
              });
            }
          });

          // Increase quantity
          increaseBtn.addEventListener('click', async () => {
            const currentValue = parseInt(input.value);
            const newValue = currentValue + 1;
            if (await handleQuantityUpdate(productId, newValue, input)) {
              gsap.from(input, {
                scale: 1.2,
                duration: 0.3,
                ease: 'power2.out'
              });
            }
          });

          // Direct input change
          input.addEventListener('change', async () => {
            const newValue = parseInt(input.value);
            if (!await handleQuantityUpdate(productId, newValue, input)) {
              input.value = input.defaultValue; // Reset to last valid value
            }
          });

          // Prevent non-numeric input
          input.addEventListener('keypress', (event) => {
            if (!/[0-9]/.test(event.key)) {
              event.preventDefault();
            }
          });
        });
      };

      // Delete functionality remains the same...
      elements.deleteButtons.forEach(button => {
        button.addEventListener('click', async () => {
          const productId = button.dataset.productId;
          const currentShippingCharge = getCurrentShippingCharge();

          const result = await Swal.fire({
            title: 'Remove Item?',
            text: 'Are you sure you want to remove this item from your cart?',
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#dc2626',
            cancelButtonColor: '#6b7280',
            confirmButtonText: 'Yes, remove it',
            cancelButtonText: 'Cancel'
          });

          if (result.isConfirmed) {
            try {
              const response = await fetch('/cart/delete', {
                method: 'POST',
                headers: {
                  'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                  productId,
                  shippingCharge: currentShippingCharge
                })
              });

              const data = await response.json();

              if (!data.success) {
                throw new Error('Failed to remove product');
              }

              await Swal.fire({
                title: 'Removed Successfully',
                text: 'The item has been removed from your cart.',
                icon: 'success',
                showConfirmButton: false,
                timer: 1500
              });

              window.location.reload();
            } catch (error) {
              console.error('Error removing item:', error);
              Swal.fire({
                title: 'Error',
                text: 'Failed to remove the item. Please try again.',
                icon: 'error'
              });
            }
          }
        });
      });

      // Show success message for free shipping
      const showFreeShippingSuccess = () => {
        Swal.fire({
          title: 'Congratulations!',
          text: 'You have unlocked Free Shipping!',
          icon: 'success',
          confirmButtonText: 'Great!'
        });
        launchConfetti();
      };

      // Initialize animations
      const initializeAnimations = () => {
        gsap.from(elements.cartItems, {
          opacity: 0,
          y: 20,
          stagger: 0.1,
          duration: 0.6,
          ease: 'power2.out'
        });

        gsap.from(elements.progressBar, {
          width: 0,
          duration: 1,
          ease: 'power2.out'
        });

        if (elements.checkoutButton) {
          elements.checkoutButton.addEventListener('mouseenter', () => {
            gsap.to(elements.checkoutButton, {
              scale: 1.05,
              duration: 0.3
            });
          });

          elements.checkoutButton.addEventListener('mouseleave', () => {
            gsap.to(elements.checkoutButton, {
              scale: 1,
              duration: 0.3
            });
          });
        }
      };

      // Initialize all functionality
      const initialize = () => {
        initializeQuantityControls();
        updateProgressBar();
        initializeAnimations();
      };

      // Start the application
      initialize();
    });
  </script>
</body>

</html>