<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Yadro - Billing Details</title>
  <script src="https://cdn.tailwindcss.com"></script>
  <link rel="icon" href="/images/logo.png" type="image/x-icon">
  <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" rel="stylesheet">
  <script src="https://cdnjs.cloudflare.com/ajax/libs/gsap/3.9.1/gsap.min.js"></script>
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
  <script src="https://checkout.razorpay.com/v1/checkout.js"></script>
  <style>
    @keyframes float {

      0%,
      100% {
        transform: translateY(0px);
      }

      50% {
        transform: translateY(-10px);
      }
    }

    #couponSuccessMessage:not(.hidden) {
      display: block;
    }

    .float-animation {
      animation: float 3s ease-in-out infinite;
    }

    .progress-bar {
      transition: width 1s cubic-bezier(0.4, 0, 0.2, 1);
    }

    .breadcrumb-item {
      position: relative;
      padding-right: 24px;
    }

    .breadcrumb-item:not(:last-child)::after {
      content: '';
      position: absolute;
      right: 10px;
      top: 50%;
      transform: translateY(-50%) rotate(45deg);
      width: 6px;
      height: 6px;
      border-top: 2px solid #CBD5E0;
      border-right: 2px solid #CBD5E0;
      transition: border-color 0.3s ease;
    }

    .saved-address-card {
      transform-origin: center;
      transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    }

    .saved-address-card:hover {
      transform: translateY(-4px);
      box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1);
    }

    .saved-address-card.selected {
      border-color: #EF4444;
      box-shadow: 0 0 0 2px #EF4444;
    }

    .form-input:focus {
      transform: scale(1.01);
    }

    .shake {
      animation: shake 0.82s cubic-bezier(.36, .07, .19, .97) both;
    }

    @keyframes shake {

      10%,
      90% {
        transform: translate3d(-1px, 0, 0);
      }

      20%,
      80% {
        transform: translate3d(2px, 0, 0);
      }

      30%,
      50%,
      70% {
        transform: translate3d(-4px, 0, 0);
      }

      40%,
      60% {
        transform: translate3d(4px, 0, 0);
      }
    }

    .success-checkmark {
      width: 80px;
      height: 80px;
      margin: 0 auto;
      display: none;
    }

    .check-circle {
      stroke-dasharray: 166;
      stroke-dashoffset: 166;
      stroke-width: 2;
      stroke-miterlimit: 10;
      stroke: #7ac142;
      fill: none;
      animation: stroke 0.6s cubic-bezier(0.65, 0, 0.45, 1) forwards;
    }

    @keyframes stroke {
      100% {
        stroke-dashoffset: 0;
      }
    }

    @keyframes fadeIn {
      from {
        opacity: 0;
        transform: translateY(10px);
      }

      to {
        opacity: 1;
        transform: translateY(0);
      }
    }

    .animate-fadeIn {
      animation: fadeIn 0.5s ease-out forwards;
    }

    .input-focus-effect:focus {
      box-shadow: 0 0 0 2px rgba(239, 68, 68, 0.2);
    }
  </style>
</head>

<body class="bg-gray-100">
  <%- include('../layouts/header-with-user.ejs') %>

  <main class="container mx-auto px-4 py-8 mt-16">
    <!-- Breadcrumbs -->
    <nav aria-label="Breadcrumb" class="hidden lg:block container mx-auto px-4 py-4">
      <ol class="flex items-center space-x-1 text-sm">
        <li class="breadcrumb-item">
          <a href="/home" class="text-gray-500 hover:text-red-500 transition duration-300">
            <i class="fas fa-home mr-1"></i>Home
          </a>
        </li>
        <li class="breadcrumb-item">
          <a href="/products" class="text-gray-500 hover:text-red-500 transition duration-300">Products</a>
        </li>
        <li class="breadcrumb-item">
          <a href="/cart" class="text-gray-500 hover:text-red-500 transition duration-300">Cart</a>
        </li>
        <li class="breadcrumb-item">
          <span class="text-gray-900 font-medium">Checkout</span>
        </li>
      </ol>
    </nav>

    <h1 class="text-4xl font-bold mb-8 text-center text-gray-800">Billing Details</h1>

    <div class="w-full bg-white rounded-full h-4 mb-8">
      <div id="progressBar" class="bg-red-500 h-4 rounded-full progress-bar" style="width: 0%"></div>
    </div>

    <div class="flex flex-wrap -mx-4">
      <div class="w-full lg:w-2/3 px-4 mb-8">
        <!-- Saved Addresses Section -->
        <div class="bg-white p-6 rounded-lg shadow-md mb-8">
          <h2 class="text-2xl font-semibold mb-4 text-gray-800">Saved Addresses</h2>
          <div id="savedAddresses" class="grid grid-cols-1 md:grid-cols-2 gap-4">
            <% addresses.forEach(function(address, index) { %>
            <div class="saved-address-card rounded-lg cursor-pointer p-5 relative border border-gray-200" data-address='<%= JSON.stringify(address) %>'>

              <h3 class="font-semibold text-lg"><%= address.addressType %></h3>
              <p class="text-sm text-gray-600 mt-2">
                <%= address.name %>,
                <%= address.streetAddress %>,
                <% if (address.apartment) { %>
                <%= address.apartment %>,
                <% } %>
                <%= address.city %>, <%= address.state %> <%= address.postalCode %>
              </p>
              <p class="text-sm text-gray-600 mt-1">
                <% if (address.landMark) { %>
                Landmark: <%= address.landMark %><br>
                <% } %>
                Phone: <%= address.phone %>
              </p>
            </div>
            <% }); %>
          </div>
        </div>

        <div class="bg-white rounded-lg shadow-sm p-6 sm:p-8 animate-fadeIn">
          <h2 class="text-2xl font-bold text-gray-900 mb-6">Add New Address</h2>

          <% if (error_msg.length > 0 ) { %>
          <div class="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative mb-6" role="alert" id="error-message">
            <strong class="font-bold">Error!</strong>
            <span class="block sm:inline"><%= error_msg %></span>
            <span class="absolute top-0 bottom-0 right-0 px-4 py-3">
              <svg class="fill-current h-6 w-6 text-red-500" role="button" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" onclick="document.getElementById('error-message').style.display='none'">
                <title>Close</title>
                <path d="M14.348 5.652a1 1 0 00-1.414-1.414L10 7.172 7.066 4.238a1 1 0 10-1.414 1.414L8.586 10l-2.934 2.934a1 1 0 101.414 1.414L10 12.828l2.934 2.934a1 1 0 101.414-1.414L11.414 10l2.934-2.934z" />
              </svg>
            </span>
          </div>
          <% } %>

          <% if (success_msg.length > 0 ) { %>
          <div class="bg-green-100 border border-green-400 text-green-700 px-4 py-3 rounded relative mb-6" role="alert" id="error-message">
            <strong class="font-bold">Sent!</strong>
            <span class="block sm:inline"><%= success_msg %></span>
            <span class="absolute top-0 bottom-0 right-0 px-4 py-3">
              <svg class="fill-current h-6 w-6 text-green-500" role="button" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" onclick="document.getElementById('error-message').style.display='none'">
                <title>Close</title>
                <path d="M14.348 5.652a1 1 0 00-1.414-1.414L10 7.172 7.066 4.238a1 1 0 10-1.414 1.414L8.586 10l-2.934 2.934a1 1 0 101.414 1.414L10 12.828l2.934 2.934a1 1 0 101.414-1.414L11.414 10l2.934-2.934z" />
              </svg>
            </span>
          </div>
          <% } %>

          <form action="/profile/add-address-checkout" method="POST" class="space-y-6">
            <!-- Address Type -->
            <div class="flex space-x-4">
              <label class="flex-1">
                <input type="radio" name="addressType" value="Home" class="sr-only peer" checked>
                <div class="p-4 text-center rounded-lg border-2 cursor-pointer transition-all peer-checked:border-red-500 peer-checked:bg-red-50 hover:border-red-200">
                  <i class="fas fa-home mb-2 text-xl"></i>
                  <p class="font-medium">Home</p>
                </div>
              </label>
              <label class="flex-1">
                <input type="radio" name="addressType" value="Office" class="sr-only peer">
                <div class="p-4 text-center rounded-lg border-2 cursor-pointer transition-all peer-checked:border-red-500 peer-checked:bg-red-50 hover:border-red-200">
                  <i class="fas fa-building mb-2 text-xl"></i>
                  <p class="font-medium">Office</p>
                </div>
              </label>
            </div>

            <!-- Street Address & Apartment -->
            <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
              <div class="col-span-2">
                <label class="block text-sm font-medium text-gray-700 mb-2">Full Name</label>
                <input type="text" value="<%= oldValue.name || '' %>" name="name" class="w-full px-4 py-3 rounded-lg border border-gray-300 focus:outline-none focus:ring-2 focus:ring-red-500 input-focus-effect">
              </div>
              <div class="col-span-2">
                <label class="block text-sm font-medium text-gray-700 mb-2">Street Address</label>
                <input type="text" value="<%= oldValue.street || '' %>" name="street" class="w-full px-4 py-3 rounded-lg border border-gray-300 focus:outline-none focus:ring-2 focus:ring-red-500 input-focus-effect">
              </div>
              <div>
                <label class="block text-sm font-medium text-gray-700 mb-2">Apartment/Suite</label>
                <input type="text" value="<%= oldValue.apartment || '' %>" name="apartment" class="w-full px-4 py-3 rounded-lg border border-gray-300 focus:outline-none focus:ring-2 focus:ring-red-500 input-focus-effect">
              </div>
              <div>
                <label class="block text-sm font-medium text-gray-700 mb-2">Landmark</label>
                <input type="text" value="<%= oldValue.landMark || '' %>" name="landMark" class="w-full px-4 py-3 rounded-lg border border-gray-300 focus:outline-none focus:ring-2 focus:ring-red-500 input-focus-effect">
              </div>
            </div>

            <!-- Location Details -->
            <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
              <div>
                <select hidden name="country" class="w-full px-4 py-3 rounded-lg border border-gray-300 focus:outline-none focus:ring-2 focus:ring-red-500 input-focus-effect">
                  <option value="<% oldValue.country || '' %>"> <%= oldValue.country || 'Select Country' %> </option>
                  <option value="US">United States</option>
                  <option value="CA">Canada</option>
                  <!-- Add more countries as needed -->
                </select>
              </div>
              <div>
                <select hidden name="state" class="w-full px-4 py-3 rounded-lg border border-gray-300 focus:outline-none focus:ring-2 focus:ring-red-500 input-focus-effect">
                  <option value="<%= oldValue.state || '' %>"><%= oldValue.state || 'Select State' %></option>
                  <!-- States will be populated based on country selection -->
                </select>
              </div>
              <div>
                <label class="block text-sm font-medium text-gray-700 mb-2">City</label>
                <input type="text" value="<%= oldValue.city || '' %>" name="city" class="w-full px-4 py-3 rounded-lg border border-gray-300 focus:outline-none focus:ring-2 focus:ring-red-500 input-focus-effect">
              </div>
              <div>
                <label class="block text-sm font-medium text-gray-700 mb-2">Postal Code</label>
                <input type="text" value="<%= oldValue.postalCode || '' %>" name="postalCode" class="w-full px-4 py-3 rounded-lg border border-gray-300 focus:outline-none focus:ring-2 focus:ring-red-500 input-focus-effect">
              </div>
            </div>

            <!-- Phone -->
            <div>
              <label class="block text-sm font-medium text-gray-700 mb-2">Phone Number</label>
              <input type="tel" value="<%= oldValue.phone || '' %>" name="phone" class="w-full px-4 py-3 rounded-lg border border-gray-300 focus:outline-none focus:ring-2 focus:ring-red-500 input-focus-effect">
            </div>

            <!-- Buttons -->
            <div class="flex justify-end space-x-4 pt-6">
              <a href="/address" class="px-6 py-3 rounded-md text-gray-700 bg-gray-100 hover:bg-gray-200 transition duration-300">Cancel</a>
              <button type="submit" class="px-6 py-3 rounded-md text-white bg-red-600 hover:bg-red-700 transition duration-300 transform hover:-translate-y-1 hover:shadow-md">Save Address</button>
            </div>
          </form>
        </div>
      </div>
      <div class="w-full lg:w-1/3 px-4">
        <div class="bg-white p-6 rounded-lg shadow-md">
          <h2 class="text-2xl font-semibold mb-4 text-gray-800">Order Summary</h2>
          <div id="orderItems">
            <% cartItems.forEach( item => { %>
            <div class="flex justify-between items-center mb-4 p-3 hover:bg-gray-50 rounded-lg transition-all duration-300 group" data-id="<%= item.productId %>">
              <div class="flex items-center flex-1">
                <div class="relative">
                  <img src="<%= item.images[0] %>" alt="<%= item.name %>" class="w-16 h-16 object-cover rounded-lg mr-4 float-animation">
                  <span class="absolute -top-2 -right-2 bg-red-500 text-white text-xs font-bold w-6 h-6 rounded-full flex items-center justify-center transform scale-0 group-hover:scale-100 transition-transform duration-300">
                    <%= item.quantity %>
                  </span>
                </div>
                <div class="flex flex-col">
                  <span class="text-sm font-medium text-gray-800"><%= item.name %></span>
                  <div class="flex items-center mt-1">
                    <span class="text-xs text-gray-500">Qty: </span>
                    <div class="flex items-center ml-2 bg-gray-100 rounded-lg overflow-hidden">
                      <span class="quantity-value px-3 py-1 text-sm font-medium"><%= item.quantity %></span>
                    </div>
                  </div>
                </div>
              </div>
              <div class="flex flex-col items-end ml-4">
                <span class="font-semibold text-gray-900">₹ <%= Math.round(item.totalPrice) %></span>
                <span class="text-xs text-gray-500">₹ <%= Math.round(item.price) %> each</span>
              </div>
            </div>
            <% }) %>
          </div>
          <div class="border-t pt-4">
            <div class="flex justify-between mb-2">
              <span>Subtotal:</span>
              <span class="font-semibold">₹ <%= totalPrice %></span>
            </div>
            <div class="flex justify-between mb-2">
              <span>Coupon Discount:</span>
              <span class="font-semibold text-green-500" id="couponDiscount">- ₹ 0</span>
            </div>
            <!-- <div class="flex justify-between mb-2">
              <span>GST:</span>
              <span>18%</span>
            </div> -->
            <div class="flex justify-between mb-2">
              <span>Shipping :</span>
              <div class="flex flex-col items-end">
                <span class="text-<%= shippingCharge > 0 ? 'red' : 'green' %>-500">+ ₹ <%= shippingCharge > 0 ? shippingCharge : 'Free'%></span>
                <% if(shippingCharge > 0) { %>
                <span class="text-green-500 text-sm">Spend ₹<%= freeDelivery %> more to get free delivery.</span>
                <% } %>
              </div>
            </div>
            <div class="flex justify-between font-semibold text-lg mt-4">
              <span>Total:</span>
              <span id="cartTotal">₹ <%= finalTotal %></span>
            </div>
          </div>

          <div class="border-t pt-4 mb-4">
            <h3 class="font-semibold text-gray-800 mb-3">Delivery Address</h3>
            <div id="selectedAddressDetails" class="hidden opacity-0 transform -translate-y-4">
              <div class="bg-gray-50 rounded-lg p-4 border border-gray-200">
                <div class="flex items-center mb-2">
                  <span id="addressType" class="inline-block px-2 py-1 text-sm rounded bg-red-100 text-red-600 font-medium"></span>
                </div>
                <p id="addressName" class="font-medium text-gray-800 mb-1"></p>
                <p id="addressStreet" class="text-gray-600 text-sm"></p>
                <p id="addressCityState" class="text-gray-600 text-sm"></p>
                <p id="addressPhone" class="text-gray-600 text-sm mt-2"></p>
              </div>
            </div>
            <div id="noAddressSelected" class="text-gray-500 text-sm text-center py-3">
              Please select a delivery address
            </div>
          </div>
          <div class="mt-6">
            <!-- <div class="mb-4">
              <label class="inline-flex items-center">
                <input type="radio" class="form-radio text-red-500 h-5 w-5" name="paymentMethod" value="wallet">
                <span class="ml-2">Wallet</span>
              </label>
            </div> -->
            <!-- <div class="mb-4">
              <label class="inline-flex items-center">
                <input type="radio" class="form-radio text-red-500 h-5 w-5" name="paymentMethod" value="razorpay">
                <span class="ml-2">Razorpay</span>
              </label>
            </div> -->
            <div class="mt-6">
              <h3 class="font-semibold text-gray-800 mb-3">Payment Method</h3>
              <div class="space-y-4">
                <!-- Cash on Delivery Option -->
                <div class="relative">
                  <input type="radio" id="cashOnDelivery" name="paymentMethod" value="cash" class="absolute w-0 h-0 opacity-0 peer">
                  <label for="cashOnDelivery" class="flex items-center p-4 border rounded-lg cursor-pointer transition-all duration-300 peer-checked:border-red-500 peer-checked:bg-red-50 hover:bg-gray-50 block">
                    <i class="fas fa-money-bill-wave text-xl mr-3 text-gray-600"></i>
                    <div class="flex flex-col">
                      <span class="font-medium text-gray-800">Cash on Delivery</span>
                      <span class="text-sm text-gray-500">Pay when you receive your order</span>
                    </div>
                    <div class="ml-auto flex items-center justify-center w-6 h-6 border-2 rounded-full peer-checked:border-red-500 peer-checked:bg-red-500">
                      <i class="fas fa-check text-white transform scale-0 peer-checked:scale-100 transition-transform"></i>
                    </div>
                  </label>
                </div>

                <!-- Razorpay Option -->
                <div class="relative">
                  <input type="radio" id="razorpay" name="paymentMethod" value="razorpay" class="absolute w-0 h-0 opacity-0 peer">
                  <label for="razorpay" class="flex items-center p-4 border rounded-lg cursor-pointer transition-all duration-300 peer-checked:border-red-500 peer-checked:bg-red-50 hover:bg-gray-50 block">
                    <i class="fas fa-credit-card text-xl mr-3 text-gray-600"></i>
                    <div class="flex flex-col">
                      <span class="font-medium text-gray-800">Pay Online (Card/UPI/Netbanking)</span>
                      <span class="text-sm text-gray-500">Pay securely with Razorpay</span>
                    </div>
                    <div class="ml-auto flex items-center justify-center w-6 h-6 border-2 rounded-full peer-checked:border-red-500 peer-checked:bg-red-500">
                      <i class="fas fa-check text-white transform scale-0 peer-checked:scale-100 transition-transform"></i>
                    </div>
                  </label>
                </div>
              </div>
            </div>
            <!-- Order status messages -->
            <div id="orderStatusMessage" class="mb-4 hidden">
              <div class="p-4 rounded-lg text-sm font-medium"></div>
            </div>

            <div class="coupon-section space-y-4 mt-6">
              <!-- Coupon Input Group -->
              <div class="flex">
                <input id="coupon" type="text" name="couponCode" placeholder="Enter coupon code" class="flex-grow px-4 py-3 rounded-l-lg border border-gray-300 focus:outline-none focus:ring-2 focus:ring-red-500 transition-all duration-300 transform hover:scale-[1.01]">
                <button id="applyCouponBtn" class="bg-red-500 text-white px-6 py-3 rounded-r-lg hover:bg-red-600 transition-all duration-300 flex items-center justify-center min-w-[120px] transform hover:-translate-y-0.5 hover:shadow-md disabled:opacity-50 disabled:cursor-not-allowed">
                  <span class="button-text">Apply</span>
                  <div class="loading-spinner hidden">
                    <svg class="animate-spin h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                      <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                      <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4z"></path>
                    </svg>
                  </div>
                </button>
              </div>

              <!-- Coupon Success Message (Initially Hidden) -->
              <div id="couponSuccessMessage" class="hidden fixed top-4 right-4 transform transition-all duration-500 max-w-sm w-full">
                <div class="bg-green-50 border border-green-200 rounded-lg p-4 flex items-start space-x-3 shadow-lg">
                  <div class="flex-shrink-0">
                    <div class="w-8 h-8 bg-green-100 rounded-full flex items-center justify-center">
                      <svg class="w-5 h-5 text-green-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
                      </svg>
                    </div>
                  </div>
                  <div class="flex-1">
                    <h3 class="text-sm font-medium text-green-800" id="couponMessageText">
                      Coupon applied successfully!
                    </h3>
                    <div class="mt-1 text-sm text-green-700" id="couponDiscountText">
                      You saved ₹<span id="savedAmount">0</span>
                    </div>
                  </div>
                  <!-- Optional: Add close button -->
                  <button onclick="hideMessages()" class="ml-4 text-green-500 hover:text-green-700">
                    <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                    </svg>
                  </button>
                </div>
              </div>
              <!-- Coupon Error Message (Initially Hidden) -->
              <div id="couponErrorMessage" class="hidden transform transition-all duration-500 -translate-y-2 opacity-0">
                <div class="bg-red-50 border border-red-200 rounded-lg p-4 flex items-start space-x-3">
                  <div class="flex-shrink-0">
                    <div class="w-8 h-8 bg-red-100 rounded-full flex items-center justify-center">
                      <svg class="w-5 h-5 text-red-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                      </svg>
                    </div>
                  </div>
                  <div class="flex-1">
                    <h3 class="text-sm font-medium text-red-800" id="couponErrorText">Invalid coupon code</h3>
                  </div>
                </div>
              </div>
            </div>

            <!-- Place order button -->
            <button id="placeOrderBtn" class="w-full bg-red-500 text-white py-4 px-6 rounded-lg hover:bg-red-600 
            focus:outline-none focus:ring-2 focus:ring-red-500 focus:ring-opacity-50 
            transition-all duration-300 text-lg font-semibold disabled:bg-gray-400 
            disabled:cursor-not-allowed transform hover:-translate-y-1 hover:shadow-lg
            flex items-center justify-center mt-6">
              <span class="mr-2">Place Order</span>
              <i class="fas fa-arrow-right"></i>
            </button>

            <!-- Order processing overlay -->
            <div id="orderProcessingOverlay" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center hidden z-50">
              <div class="bg-white p-8 rounded-lg shadow-xl text-center max-w-md mx-4">
                <div class="processing-spinner mb-4">
                  <!-- Spinner animation here -->
                </div>
                <h3 class="text-xl font-semibold mb-2">Processing Your Order</h3>
                <p class="text-gray-600">Please wait while we confirm your order details...</p>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </main>

  <%- include('../layouts/footer.ejs') %>
  <script src="/js/actions/coupon.js"></script>
  <script src="/js/actions/address-selection.js"></script>
  <script src="/js/loadingAnimation.js"></script>

  <script>
    // Maintain a global orderState object
    const orderState = {
      selectedAddress: null,
      paymentMethod: 'cash', // Default payment method
      items: [], // Will be populated from cart
      totalAmount: 0 // Will be calculated from cart
    };


    document.querySelectorAll('input[name="paymentMethod"]').forEach(radio => {
      radio.addEventListener('change', function() {
        // Remove checked styles from all labels
        document.querySelectorAll('label[for^="razorpay"], label[for^="cashOnDelivery"]')
          .forEach(label => {
            label.classList.remove('border-red-500', 'bg-red-50');
          });

        // Add checked styles to selected label
        if (this.checked) {
          const label = document.querySelector(`label[for="${this.id}"]`);
          label.classList.add('border-red-500', 'bg-red-50');
        }
      });
    });


    document.addEventListener('DOMContentLoaded', function() {
      const placeOrderBtn = document.getElementById('placeOrderBtn');
      const addressCards = document.querySelectorAll('.saved-address-card');
      const selectedAddressDetails = document.getElementById('selectedAddressDetails');
      const noAddressSelected = document.getElementById('noAddressSelected');

      // Initialize cart items from the server-rendered data
      initializeCartItems();

      // Initialize payment method listeners
      initializePaymentMethods();

      // Initialize address selection
      initializeAddressSelection();


      // Set up place order button
      if (placeOrderBtn) {
        placeOrderBtn.addEventListener('click', placeOrder);
        // Initially disable the button
        disablePlaceOrderButton();
      }
    });


    // Function to initialize cart items from the server-rendered data
    function initializeCartItems() {
      const cartItemsElements = document.querySelectorAll('[data-id]');
      cartItemsElements.forEach(itemElement => {
        const productId = itemElement.getAttribute('data-id');
        const itemName = itemElement.querySelector('.text-sm').textContent;
        const itemPrice = parseFloat(itemElement.querySelector('.text-xs').textContent.replace('₹ ', ''));
        const itemQuantity = parseInt(itemElement.querySelector('.quantity-value').textContent);
        const totalPrice = parseFloat(itemElement.querySelector('.font-semibold').textContent.replace('₹ ', ''));
        const itemImage = itemElement.querySelector('img').src;

        // Push each cart item into the orderState.items array
        orderState.items.push({
          productId,
          name: itemName,
          quantity: itemQuantity,
          totalPrice,
          image: itemImage
        });

        // Update the total amount in the orderState
        orderState.totalAmount += totalPrice;
      });

      // Now validate the order state to update the UI based on cart items
      validateOrderState();
    }




    function initializePaymentMethods() {
      const paymentMethods = document.querySelectorAll('input[name="paymentMethod"]');
      paymentMethods.forEach(method => {
        method.addEventListener('change', (e) => {
          orderState.paymentMethod = e.target.value;

          // Update UI for payment selection
          document.querySelectorAll('label[for^="razorpay"], label[for^="cashOnDelivery"]')
            .forEach(label => {
              label.classList.remove('border-red-500', 'bg-red-50');
            });

          const label = document.querySelector(`label[for="${e.target.id}"]`);
          if (label) {
            label.classList.add('border-red-500', 'bg-red-50');
          }

          validateOrderState();
        });
      });
    }

    function initializeAddressSelection() {
      const addressCards = document.querySelectorAll('.saved-address-card');

      addressCards.forEach(card => {
        card.addEventListener('click', () => {
          // Get address data from the card's data attribute
          const addressData = JSON.parse(card.dataset.address);

          // Update orderState with selected address
          orderState.selectedAddress = addressData;

          // Update UI
          updateSelectedAddressUI(addressData);

          // Validate order state
          validateOrderState();
        });
      });
    }

    function updateSelectedAddressUI(addressData) {
      const selectedAddressDetails = document.getElementById('selectedAddressDetails');
      const noAddressSelected = document.getElementById('noAddressSelected');

      if (selectedAddressDetails && noAddressSelected) {
        // Show selected address details
        selectedAddressDetails.classList.remove('hidden');
        noAddressSelected.classList.add('hidden');

        // Update address details
        document.getElementById('addressType').textContent = addressData.addressType;
        document.getElementById('addressName').textContent = addressData.name;
        document.getElementById('addressStreet').textContent =
          `${addressData.streetAddress}${addressData.apartment ? ', ' + addressData.apartment : ''}`;
        document.getElementById('addressCityState').textContent =
          `${addressData.city}, ${addressData.state} ${addressData.postalCode}`;
        document.getElementById('addressPhone').textContent = `📞 ${addressData.phone}`;
      }
    }

    function validateOrderState() {
      const isValid = orderState.selectedAddress && orderState.paymentMethod;
      const placeOrderBtn = document.getElementById('placeOrderBtn');
      console.log('isValid', isValid);
      console.log('order State', orderState);
      if (isValid) {
        enablePlaceOrderButton();

        // Update button text based on payment method
        if (placeOrderBtn) {
          placeOrderBtn.innerHTML = orderState.paymentMethod === 'razorpay' ?
            '<span class="mr-2">Proceed to Payment</span><i class="fas fa-arrow-right"></i>' :
            '<span class="mr-2">Place Order</span><i class="fas fa-arrow-right"></i>';
        }
      } else {
        disablePlaceOrderButton();
      }

      return isValid;
    }

    function enablePlaceOrderButton() {
      const placeOrderBtn = document.getElementById('placeOrderBtn');
      if (placeOrderBtn) {
        placeOrderBtn.disabled = false;
        placeOrderBtn.classList.remove('bg-gray-400');
        placeOrderBtn.classList.add('bg-red-500', 'hover:bg-red-600');
      }
    }

    function disablePlaceOrderButton() {
      const placeOrderBtn = document.getElementById('placeOrderBtn');
      if (placeOrderBtn) {
        placeOrderBtn.disabled = true;
        placeOrderBtn.classList.remove('bg-red-500', 'hover:bg-red-600');
        placeOrderBtn.classList.add('bg-gray-400');
      }
    }

    async function placeOrder() {
      if (!validateOrderState()) {
        showErrorAnimation('Please select a delivery address and payment method');
        return;
      }

      try {

        showLoadingAnimation('liquid', 'Please wait...');

        // Get coupon details
        const couponDiscountElement = document.getElementById('couponDiscount');
        const couponDiscountValue = couponDiscountElement.textContent;
        const discountNumber = parseFloat(couponDiscountValue.replace(/[₹,\s-]/g, ''));
        const couponInputElement = document.getElementById('coupon');
        const couponCode = couponInputElement.value;

        // Prepare order data
        const orderData = {
          deliveryAddress: orderState.selectedAddress,
          paymentMethod: orderState.paymentMethod,
          items: orderState.items,
          totalAmount: orderState.totalAmount,
          couponDiscountValue: discountNumber,
          couponCode,
        };

        if (orderState.paymentMethod === 'cash') {
          await handleCashOrder(orderData);
        } else if (orderState.paymentMethod === 'razorpay') {
          console.log("Order Data", orderData);
          await handleRazorpayOrder(orderData);
        }
      } catch (error) {
        showErrorAnimation(error.message || 'An error occurred. Please try again.');
        hideLoadingAnimation()
      }
    }

    async function handleCashOrder(orderData) {
      const response = await fetch('/place-order', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(orderData)
      });

      if (!response.ok) {
        throw new Error('Failed to place order');
      }
      const result = await response.json();
      setTimeout(() => {
        window.location.href = `/order-confirmation/${result.orderId}`;
      }, 2000);
    }

    async function handleRazorpayOrder(orderData) {
      console.log('================>', orderData);
      const response = await fetch('/createOrder', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          amount: orderData.totalAmount, // Ensure this is in the correct format
          orderData: orderData,
        })
      });

      if (!response.ok) {
        throw new Error('Failed to create Razorpay order');
      }

      const order = await response.json();
      initializeRazorpayPayment(order, orderData);
    }

    function initializeRazorpayPayment(order, orderData) {
      console.log('---------', order);
      console.log('{{{{{{{{{{{{{}}}}}}}}}}}}}', orderData);

      const options = {
        key: 'rzp_test_t4YUM4TLWyBT2D',
        amount: Number('<%= finalTotal %>' * 100),
        currency: order.currency,
        name: 'YADRO',
        description: 'Order Payment',
        order_id: order.id,
        prefill: {
          name: orderData.deliveryAddress.name,
          email: orderData.deliveryAddress.email,
          contact: orderData.deliveryAddress.phone
        },
        handler: async function(response) {
          console.log('verifying', response);

          // Proceed to place the order after successful payment
          const placeOrderResponse = await fetch('/place-order', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({
              deliveryAddress: orderData.deliveryAddress,
              paymentMethod: 'razorpay',
              items: orderData.items,
              totalAmount: orderData.totalAmount,
              couponDiscountValue: orderData.couponDiscountValue,
              couponCode: orderData.couponCode,
            }),
          });

          if (placeOrderResponse.ok) {
            const placeOrderData = await placeOrderResponse.json();
            console.log(placeOrderData)
            window.location.href = `/order-confirmation/${placeOrderData.orderId}`;
          } else {
            hideLoadingAnimation();
            const errorData = await placeOrderResponse.json();
            console.error('Error placing the order:', errorData.message);
            showErrorAnimation('There was an error placing the order. Please try again.');
          }
        },
        theme: {
          color: '#d62617',
        },
        modal: {
          ondismiss: function() {
            hideLoadingAnimation()
            showErrorAnimation('Payment process was cancelled. Please try again.');
          }
        }
      };

      const razorpay = new Razorpay(options);
      razorpay.open();
    }




    // CSS Styles
    const Errorstyles = `
.error-overlay {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: rgba(0, 0, 0, 0.2);
  display: flex;
  justify-content: center;
  align-items: center;
  z-index: 10000;
  opacity: 0;
  animation: fadeIn 0.3s ease forwards;
}

.error-container {
  width: 90%;
  max-width: 400px;
  background: white;
  border-radius: 16px;
  padding: 20px;
  box-shadow: 0 20px 60px rgba(220, 38, 38, 0.1), 
              0 8px 24px rgba(220, 38, 38, 0.1),
              0 2px 8px rgba(220, 38, 38, 0.15);
  position: relative;
  transform: translateY(20px);
  opacity: 0;
  animation: slideUp 0.4s ease 0.2s forwards;
  overflow: hidden;
}

.error-container::before {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 4px;
  background: linear-gradient(90deg, #DC2626, #EF4444);
  animation: progress 3s linear;
}

.error-icon {
  width: 64px;
  height: 64px;
  margin: 0 auto 16px;
  position: relative;
  animation: bounceIn 0.6s cubic-bezier(0.68, -0.55, 0.265, 1.55) 0.4s forwards;
  transform: scale(0);
}

.error-icon svg {
  width: 100%;
  height: 100%;
  color: #DC2626;
  animation: shake 0.8s cubic-bezier(.36,.07,.19,.97) 1s both;
}

.error-title {
  font-family: system-ui, -apple-system, sans-serif;
  color: #1F2937;
  font-size: 20px;
  font-weight: 600;
  text-align: center;
  margin-bottom: 12px;
  opacity: 0;
  animation: fadeIn 0.3s ease 0.6s forwards;
}

.error-message {
  font-family: system-ui, -apple-system, sans-serif;
  color: #4B5563;
  font-size: 15px;
  text-align: center;
  line-height: 1.5;
  margin-bottom: 20px;
  opacity: 0;
  animation: fadeIn 0.3s ease 0.8s forwards;
}

.error-actions {
  display: flex;
  justify-content: center;
  gap: 12px;
  opacity: 0;
  animation: fadeIn 0.3s ease 1s forwards;
}

.error-button {
  padding: 10px 20px;
  border-radius: 8px;
  font-family: system-ui, -apple-system, sans-serif;
  font-size: 14px;
  font-weight: 500;
  cursor: pointer;
  transition: all 0.2s ease;
  position: relative;
  overflow: hidden;
}

.error-button.primary {
  background: #DC2626;
  color: white;
  border: none;
}

.error-button.primary:hover {
  background: #B91C1C;
  transform: translateY(-1px);
}

.error-button.secondary {
  background: transparent;
  color: #4B5563;
  border: 1px solid #E5E7EB;
}

.error-button.secondary:hover {
  background: #F3F4F6;
  transform: translateY(-1px);
}

.error-button::after {
  content: '';
  position: absolute;
  top: 50%;
  left: 50%;
  width: 120%;
  height: 120%;
  background: rgba(255, 255, 255, 0.2);
  border-radius: 50%;
  transform: translate(-50%, -50%) scale(0);
  opacity: 0;
}

.error-button:active::after {
  animation: ripple 0.6s linear;
}

@keyframes fadeIn {
  from { opacity: 0; }
  to { opacity: 1; }
}

@keyframes slideUp {
  from { 
    transform: translateY(20px);
    opacity: 0;
  }
  to { 
    transform: translateY(0);
    opacity: 1;
  }
}

@keyframes bounceIn {
  from { transform: scale(0); }
  to { transform: scale(1); }
}

@keyframes shake {
  10%, 90% { transform: rotate(-2deg); }
  20%, 80% { transform: rotate(4deg); }
  30%, 50%, 70% { transform: rotate(-6deg); }
  40%, 60% { transform: rotate(6deg); }
}

@keyframes progress {
  from { width: 100%; }
  to { width: 0%; }
}

@keyframes ripple {
  0% {
    transform: translate(-50%, -50%) scale(0);
    opacity: 1;
  }
  100% {
    transform: translate(-50%, -50%) scale(1);
    opacity: 0;
  }
}

.pulse {
  animation: pulse 2s infinite;
}

@keyframes pulse {
  0% { transform: scale(1); }
  50% { transform: scale(1.05); }
  100% { transform: scale(1); }
}
`;

    function showErrorAnimation(message, title = 'Error', onRetry = null, onClose = null) {
      // Add styles
      if (!document.getElementById('error-styles')) {
        const styleSheet = document.createElement('style');
        styleSheet.id = 'error-styles';
        styleSheet.textContent = Errorstyles;
        document.head.appendChild(styleSheet);
      }

      // Create elements
      const overlay = document.createElement('div');
      overlay.className = 'error-overlay';
      overlay.id = 'errorOverlay';

      const container = document.createElement('div');
      container.className = 'error-container';

      // Error icon
      const iconContainer = document.createElement('div');
      iconContainer.className = 'error-icon';
      iconContainer.innerHTML = `
    <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
      <circle cx="12" cy="12" r="10"/>
      <path d="M12 8v4m0 4h.01"/>
    </svg>
  `;

      // Error content
      const titleElement = document.createElement('div');
      titleElement.className = 'error-title';
      titleElement.textContent = title;

      const messageElement = document.createElement('div');
      messageElement.className = 'error-message';
      messageElement.textContent = message;

      // Action buttons
      const actions = document.createElement('div');
      actions.className = 'error-actions';

      if (onRetry) {
        const retryButton = document.createElement('button');
        retryButton.className = 'error-button primary';
        retryButton.textContent = 'Try Again';
        retryButton.onclick = () => {
          hideErrorAnimation();
          onRetry();
        };
        actions.appendChild(retryButton);
      }

      const closeButton = document.createElement('button');
      closeButton.className = 'error-button secondary';
      closeButton.textContent = 'Close';
      closeButton.onclick = () => {
        hideErrorAnimation();
        if (onClose) onClose();
      };
      actions.appendChild(closeButton);

      // Assemble the error message
      container.appendChild(iconContainer);
      container.appendChild(titleElement);
      container.appendChild(messageElement);
      container.appendChild(actions);
      overlay.appendChild(container);

      // Add to document
      document.body.appendChild(overlay);

      // Auto-close after 5 seconds
      const autoCloseTimeout = setTimeout(() => {
        hideErrorAnimation();
      }, 5000);

      // Return function to manually close
      return () => {
        clearTimeout(autoCloseTimeout);
        hideErrorAnimation();
      };
    }

    function hideErrorAnimation() {
      const overlay = document.getElementById('errorOverlay');
      if (overlay) {
        overlay.style.animation = 'fadeIn 0.3s ease reverse';
        setTimeout(() => overlay.remove(), 300);
      }
    }
  </script>

</body>

</html>