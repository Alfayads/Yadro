<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Yadro - Wallet</title>
  <script src="https://cdn.tailwindcss.com"></script>
  <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" rel="stylesheet">
  <script src="https://cdnjs.cloudflare.com/ajax/libs/gsap/3.11.4/gsap.min.js"></script>
  <style>
    @import url('https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700&display=swap');

    body {
      font-family: 'Poppins', sans-serif;
      background-color: #F3F4F6;
    }

    .red-gradient-bg {
      background: linear-gradient(135deg, #FF6B6B 0%, #FF8787 100%);
    }

    .card-shadow {
      box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
    }

    .transaction-row {
      transition: all 0.3s ease;
    }

    .transaction-row:hover {
      transform: translateY(-5px);
      box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
    }

    .balance-card {
      background: linear-gradient(135deg, #FF6B6B 0%, #FF8787 100%);
      transition: all 0.3s ease;
    }

    .balance-card:hover {
      transform: translateY(-5px);
      box-shadow: 0 15px 30px -5px rgba(0, 0, 0, 0.3);
    }

    .action-button {
      transition: all 0.3s ease;
    }

    .action-button:hover {
      transform: translateY(-2px);
    }

    .glassmorphism {
      background: rgba(255, 255, 255, 0.25);
      backdrop-filter: blur(10px);
      border-radius: 10px;
      border: 1px solid rgba(255, 255, 255, 0.18);
    }

    .card-container {
      perspective: 1000px;
      width: 100%;
      max-width: 400px;
      height: 250px;
      margin: 2rem auto;
    }

    .card {
      position: relative;
      width: 100%;
      height: 100%;
      transition: transform 0.8s;
      transform-style: preserve-3d;
      cursor: pointer;
    }

    .card-face {
      position: absolute;
      width: 100%;
      height: 100%;
      backface-visibility: hidden;
      border-radius: 15px;
      overflow: hidden;
      box-shadow: 0 15px 35px rgba(0, 0, 0, 0.2);
    }

    .card-front {
      background: linear-gradient(45deg, #1a237e, #3949ab);
    }

    .card-back {
      background: linear-gradient(45deg, #303f9f, #3f51b5);
      transform: rotateY(180deg);
    }

    .card.is-flipped {
      transform: rotateY(180deg);
    }

    .chip {
      width: 60px;
      height: 45px;
      background: linear-gradient(135deg, #ffd700 0%, #ffaa00 100%);
      border-radius: 8px;
      position: relative;
      overflow: hidden;
    }

    .chip::before,
    .chip::after {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background-image:
        linear-gradient(90deg, transparent 50%, rgba(255, 255, 255, 0.1) 50%),
        linear-gradient(90deg, transparent 50%, rgba(255, 255, 255, 0.1) 50%);
      background-size: 4px 100%, 4px 100%;
      background-position: 0 0, 2px 0;
    }

    .chip::after {
      transform: rotate(90deg);
    }

    .logo {
      font-size: 24px;
      font-weight: bold;
      color: #fff;
      text-transform: uppercase;
      letter-spacing: 2px;
    }

    .contactless {
      width: 30px;
      height: 30px;
      background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24' fill='%23ffffff'%3E%3Cpath d='M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.42 0-8-3.58-8-8s3.58-8 8-8 8 3.58 8 8-3.58 8-8 8z'/%3E%3Cpath d='M0 0h24v24H0z' fill='none'/%3E%3Cpath d='M7.1 10.9c.5-.5 1.2-.8 1.9-.8s1.4.3 1.9.8c.1.1.3.1.4 0 .1-.1.1-.3 0-.4-.6-.6-1.4-.9-2.3-.9-.9 0-1.7.3-2.3.9-.1.1-.1.3 0 .4.1.1.3.1.4 0zm3.8 1.6c-.3-.3-.7-.4-1.1-.4-.4 0-.8.1-1.1.4-.1.1-.1.3 0 .4.1.1.3.1.4 0 .2-.2.4-.3.7-.3.3 0 .5.1.7.3.1.1.3.1.4 0 .1-.1.1-.3 0-.4z'/%3E%3C/svg%3E");
      background-size: contain;
      background-repeat: no-repeat;
    }

    .wave {
      position: absolute;
      bottom: 0;
      left: 0;
      width: 100%;
      height: 50%;
      background: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 1440 320'%3E%3Cpath fill='rgba(255,255,255,0.1)' fill-opacity='1' d='M0,32L48,37.3C96,43,192,53,288,90.7C384,128,480,192,576,186.7C672,181,768,107,864,101.3C960,96,1056,160,1152,170.7C1248,181,1344,139,1392,117.3L1440,96L1440,320L1392,320C1344,320,1248,320,1152,320C1056,320,960,320,864,320C768,320,672,320,576,320C480,320,384,320,288,320C192,320,96,320,48,320L0,320Z'%3E%3C/path%3E%3C/svg%3E");
      background-size: cover;
      opacity: 0.5;
    }

    .magnetic-strip {
      width: 100%;
      height: 50px;
      background-color: #000;
      margin: 20px 0;
    }

    .signature {
      width: 200px;
      height: 40px;
      background-color: #fff;
      margin-left: auto;
    }

    .card-face::before {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background: linear-gradient(105deg,
          transparent 0%,
          rgba(255, 255, 255, 0.2) 25%,
          transparent 50%);
      opacity: 0;
      transition: opacity 0.3s;
      pointer-events: none;
    }

    .card-container:hover .card-face::before {
      opacity: 1;
      background-position: var(--glare-x) var(--glare-y);
    }

    .hologram {
      width: 60px;
      height: 40px;
      background: linear-gradient(135deg, #c4e0e5 0%, #4ca1af 100%);
      border-radius: 4px;
      position: relative;
      overflow: hidden;
    }

    .hologram::before {
      content: '';
      position: absolute;
      top: -50%;
      left: -50%;
      width: 200%;
      height: 200%;
      background: linear-gradient(to bottom right,
          rgba(255, 255, 255, 0) 0%,
          rgba(255, 255, 255, 0.1) 50%,
          rgba(255, 255, 255, 0) 100%);
      transform: rotate(45deg);
      animation: hologramShine 2s linear infinite;
    }

    @keyframes hologramShine {
      0% {
        transform: translateX(-50%) rotate(45deg);
      }

      100% {
        transform: translateX(50%) rotate(45deg);
      }
    }

    .card-number span {
      display: inline-block;
    }
  </style>
</head>

<body class="bg-gray-100">
  <%- include('../layouts/header-with-user.ejs') %>

  <main class="container mx-auto px-4 py-8">
    <div class="flex justify-between items-center mb-8">
      <div class="text-sm breadcrumbs">
        <ul class="flex">
          <li><a href="/home" class="text-gray-500">Home / </a></li>
          <li class="text-red-500 font-semibold ml-1">Wallet</li>
        </ul>
      </div>
      <div class="text-gray-600">Welcome! <span class="text-red-500 font-semibold"><%= user.fname %> <%= user.lname %></span></div>
    </div>

    <div class="flex flex-col lg:flex-row space-y-8 lg:space-y-0 lg:space-x-8">
      <div class="w-full lg:w-1/3">
        <!-- Enhanced Credit Card -->
        <div class="card-container" id="cardContainer">
          <div class="card" id="card">
            <div class="card-face card-front flex flex-col justify-between p-6">
              <div class="flex justify-between items-center">
                <div class="chip"></div>
                <div class="logo">Yadro</div>
              </div>
              <div class="text-white text-2xl font-mono tracking-wider card-number" id="cardNumber">1234 5678 9012 3456</div>
              <div class="flex justify-between items-end text-white">
                <div>
                  <div class="text-xs opacity-80">Card Holder</div>
                  <div class="font-semibold" id="cardHolder"><%= user.fname %> <%= user.lname %></div>
                </div>
                <div>
                  <div class="text-xs opacity-80">Expires</div>
                  <div class="font-semibold">12/28</div>
                </div>
              </div>
              <div class="flex justify-between items-center mt-4">
                <div class="contactless"></div>
                <div class="text-white text-xs">Debit</div>
              </div>
              <div class="wave"></div>
            </div>
            <div class="card-face card-back flex flex-col justify-between p-6">
              <div class="magnetic-strip"></div>
              <div class="flex flex-col items-end">
                <div class="w-full bg-white h-8 mb-4"></div>
                <div class="w-16 h-8 bg-white rounded flex items-center justify-center">
                  <p class="text-black font-mono">***</p>
                </div>
              </div>
              <div class="flex justify-between items-center">
                <div class="signature"></div>
                <div class="hologram"></div>
              </div>
              <div class="text-white text-xs opacity-80 mt-4">
                This card is property of Yadro Bank. If found, please return to the nearest branch.
              </div>
            </div>
          </div>

        </div>
        <!-- Profile Card -->
        <div class="bg-white rounded-xl shadow-lg p-6 text-center card-shadow">
          <div class="red-gradient-bg w-32 h-32 rounded-full flex items-center justify-center mx-auto mb-4">
            <i class="fas fa-user text-white text-5xl"></i>
          </div>
          <h2 class="text-2xl font-bold mb-2"><%= user.fname %> <%= user.lname %></h2>
          <p class="text-gray-600">Premium Member</p>
          <div class="mt-4 flex justify-center space-x-2">
            <a href="/account" class="red-gradient-bg text-white px-4 py-2 rounded-full hover:opacity-90 transition duration-300">Edit Profile</a>
            <button class="bg-gray-200 text-gray-700 px-4 py-2 rounded-full hover:bg-gray-300 transition duration-300">Settings</button>
          </div>
        </div>
      </div>
      <div class="w-full lg:w-2/3">
        <div class="bg-white rounded-xl shadow-lg p-6 mb-8 card-shadow">
          <h2 class="text-2xl font-bold mb-4">Wallet Overview</h2>
          <div class="flex flex-col md:flex-row space-y-4 md:space-y-0 md:space-x-4">
            <div class="balance-card text-white p-6 rounded-lg flex-grow">
              <h3 class="text-xl mb-2">Current Balance</h3>
              <p class="text-4xl font-bold" id="balance">₹ 10,000</p>
              <div class="mt-4 flex justify-between items-center">
                <span class="text-sm">Last updated: <span id="lastUpdated">2024-10-10</span></span>
                <button class="glassmorphism px-3 py-1 text-sm">Refresh</button>
              </div>
            </div>
            <div class="space-y-4">
              <button class="action-button bg-green-500 text-white py-3 px-6 rounded-lg w-full hover:bg-green-600 transition duration-300 ease-in-out">
                <i class="fas fa-plus mr-2"></i>Deposit Money
              </button>
              <button class="action-button bg-red-500 text-white py-3 px-6 rounded-lg w-full hover:bg-red-600 transition duration-300 ease-in-out">
                <i class="fas fa-minus mr-2"></i>Withdraw Money
              </button>
            </div>
          </div>
        </div>
        <div class="bg-white rounded-xl shadow-lg p-6 card-shadow">
          <h2 class="text-2xl font-bold mb-4">Transaction History</h2>
          <div class="overflow-x-auto">
            <table class="w-full">
              <thead class="bg-gray-100">
                <tr>
                  <th class="py-3 px-4 text-left">Type</th>
                  <th class="py-3 px-4 text-left">Amount</th>
                  <th class="py-3 px-4 text-left">Description</th>
                  <th class="py-3 px-4 text-left">Date</th>
                  <th class="py-3 px-4 text-left">Time</th>
                </tr>
              </thead>
              <tbody id="transactionBody">
                <!-- Transaction rows will be dynamically inserted here -->
              </tbody>
            </table>
          </div>
          <div class="text-center mt-4">
            <a href="/wallet/history" class="text-red-500 hover:underline">Show more</a>
          </div>
        </div>
      </div>
    </div>
  </main>

  <%- include('../layouts/footer.ejs') %>

  <script>
    const card = document.getElementById('card');
    const cardContainer = document.getElementById('cardContainer');
    const cardNumber = document.getElementById('cardNumber');
    const cardHolder = document.getElementById('cardHolder');


    // Flip card on click
    card.addEventListener('click', () => {
      card.classList.toggle('is-flipped');
    });

    // Tilt effect
    cardContainer.addEventListener('mousemove', (e) => {
      if (!card.classList.contains('is-flipped')) {
        const rect = cardContainer.getBoundingClientRect();
        const x = e.clientX - rect.left;
        const y = e.clientY - rect.top;
        const centerX = rect.width / 2;
        const centerY = rect.height / 2;
        const rotateX = (y - centerY) / 10;
        const rotateY = (centerX - x) / 10;

        gsap.to(card, {
          rotateX: rotateX,
          rotateY: rotateY,
          duration: 0.5,
          ease: 'power2.out'
        });
      }
    });

    cardContainer.addEventListener('mouseleave', () => {
      if (!card.classList.contains('is-flipped')) {
        gsap.to(card, {
          rotateX: 0,
          rotateY: 0,
          duration: 0.5,
          ease: 'power2.out'
        });
      }
    });

    // Animate card number
    function animateCardNumber() {
      const numbers = cardNumber.textContent.split(' ');
      cardNumber.textContent = '';
      numbers.forEach((number, index) => {
        const span = document.createElement('span');
        span.textContent = number;
        cardNumber.appendChild(span);
        if (index < 3) cardNumber.appendChild(document.createTextNode(' '));

        gsap.from(span, {
          opacity: 0,
          y: 20,
          duration: 0.5,
          delay: index * 0.1,
          ease: 'power2.out'
        });
      });
    }

    // Animate card holder
    function animateCardHolder() {
      const letters = cardHolder.textContent.split('');
      cardHolder.textContent = '';
      letters.forEach((letter, index) => {
        const span = document.createElement('span');
        span.textContent = letter;
        cardHolder.appendChild(span);

        gsap.from(span, {
          opacity: 0,
          x: -10,
          duration: 0.3,
          delay: index * 0.05,
          ease: 'power2.out'
        });
      });
    }

    // Run animations
    animateCardNumber();
    animateCardHolder();

    // Glare effect
    cardContainer.addEventListener('mousemove', (e) => {
      const rect = cardContainer.getBoundingClientRect();
      const x = e.clientX - rect.left;
      const y = e.clientY - rect.top;
      const glareX = (x / rect.width) * 100;
      const glareY = (y / rect.height) * 100;

      gsap.to(card, {
        '--glare-x': `${glareX}%`,
        '--glare-y': `${glareY}%`,
        duration: 0.3
      });
    });

    // Pulse animation for contactless icon
    const contactless = document.querySelector('.contactless');
    gsap.to(contactless, {
      scale: 1.1,
      duration: 0.5,
      repeat: -1,
      yoyo: true,
      ease: 'power1.inOut'
    });

    // Subtle floating animation for the entire card
    gsap.to(card, {
      y: -10,
      duration: 2,
      repeat: -1,
      yoyo: true,
      ease: 'power1.inOut'
    });

    // Shine effect for hologram
    const hologram = document.querySelector('.hologram');
    gsap.to(hologram, {
      backgroundPosition: '200% 0',
      duration: 1.5,
      repeat: -1,
      ease: 'linear'
    });

    // Animate balance counter
    const balanceElement = document.getElementById('balance');
    const targetBalance = 10000;
    let currentBalance = 0;
    const duration = 2000; // 2 seconds
    const frameRate = 60;
    const increment = targetBalance / (duration / 1000 * frameRate);

    function updateBalance() {
      currentBalance += increment;
      if (currentBalance >= targetBalance) {
        currentBalance = targetBalance;
        clearInterval(balanceInterval);
      }
      balanceElement.textContent = `₹ ${Math.round(currentBalance).toLocaleString()}`;
    }

    const balanceInterval = setInterval(updateBalance, 1000 / frameRate);

    // Transaction data
    const transactions = [{
        type: 'Smartphones',
        amount: -15000,
        description: 'iPhone 13',
        date: '2024-09-01',
        time: '10:15'
      },
      {
        type: 'Laptops',
        amount: -55000,
        description: 'MacBook Air',
        date: '2024-09-03',
        time: '13:45'
      },
      {
        type: 'Accessories',
        amount: -1500,
        description: 'AirPods',
        date: '2024-09-05',
        time: '15:30'
      },
      {
        type: 'Tablets',
        amount: -20000,
        description: 'iPad Mini',
        date: '2024-09-08',
        time: '11:20'
      },
      {
        type: 'Laptops',
        amount: -65000,
        description: 'Dell XPS',
        date: '2024-09-15',
        time: '14:00'
      },
    ];

    // Populate transaction table
    const transactionBody = document.getElementById('transactionBody');
    transactions.forEach((transaction, index) => {
      const row = document.createElement('tr');
      row.className = 'transaction-row';
      row.innerHTML = `
        <td class="py-3 px-4">${transaction.type}</td>
        <td class="py-3 px-4 ${transaction.amount < 0 ? 'text-red-500' : 'text-green-500'}">${transaction.amount.toLocaleString('en-IN', { style: 'currency', currency: 'INR' })}</td>
        <td class="py-3 px-4">${transaction.description}</td>
        <td class="py-3 px-4">${transaction.date}</td>
        <td class="py-3 px-4">${transaction.time}</td>
      `;
      transactionBody.appendChild(row);
    });

    // Animate transaction rows
    gsap.from(".transaction-row", {
      opacity: 0,
      y: 20,
      stagger: 0.1,
      duration: 0.5,
      ease: "power2.out"
    });

    // Update last updated date
    const lastUpdatedElement = document.getElementById('lastUpdated');
    const currentDate = new Date();
    lastUpdatedElement.textContent = currentDate.toLocaleDateString('en-US', {
      year: 'numeric',
      month: '2-digit',
      day: '2-digit'
    });

    // Add hover animation for action buttons
    const actionButtons = document.querySelectorAll('.action-button');
    actionButtons.forEach(button => {
      button.addEventListener('mouseenter', () => {
        gsap.to(button, {
          scale: 1.05,
          duration: 0.3
        });
      });
      button.addEventListener('mouseleave', () => {
        gsap.to(button, {
          scale: 1,
          duration: 0.3
        });
      });
    });

    // Add parallax effect to balance card
    const balanceCard = document.querySelector('.balance-card');
    balanceCard.addEventListener('mousemove', (e) => {
      const rect = balanceCard.getBoundingClientRect();
      const x = e.clientX - rect.left;
      const y = e.clientY - rect.top;

      const xPercent = (x / rect.width - 0.5) * 20;
      const yPercent = (y / rect.height - 0.5) * 20;

      gsap.to(balanceCard, {
        rotationY: xPercent,
        rotationX: -yPercent,
        duration: 0.5,
        ease: 'power2.out'
      });
    });

    balanceCard.addEventListener('mouseleave', () => {
      gsap.to(balanceCard, {
        rotationY: 0,
        rotationX: 0,
        duration: 0.5,
        ease: 'power2.out'
      });
    });
  </script>
</body>

</html>