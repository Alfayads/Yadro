<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Return Request - <%= order._id %></title>
  <script src="https://cdn.tailwindcss.com"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/gsap/3.11.4/gsap.min.js"></script>
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">

  <style>
    @keyframes shimmer {
      0% {
        background-position: -1000px 0;
      }

      100% {
        background-position: 1000px 0;
      }
    }

    .animate-shimmer {
      animation: shimmer 2s infinite linear;
      background: linear-gradient(to right, #f6f7f8 8%, #edeef1 18%, #f6f7f8 33%);
      background-size: 1000px 100%;
    }

    @keyframes slide-in {
      0% {
        transform: translateX(-100%);
        opacity: 0;
      }

      100% {
        transform: translateX(0);
        opacity: 1;
      }
    }

    .slide-in {
      animation: slide-in 0.5s ease-out forwards;
    }

    @keyframes pulse-border {
      0% {
        border-color: #e5e7eb;
      }

      50% {
        border-color: #6366f1;
      }

      100% {
        border-color: #e5e7eb;
      }
    }

    .pulse-border {
      animation: pulse-border 2s infinite;
    }

    .step-transition {
      transition: transform 0.5s ease-out, opacity 0.5s ease-out;
    }
  </style>
</head>

<body class="bg-gray-50 min-h-screen">
  <!-- Header -->
  <%- include('../layouts/header-with-user.ejs') %>

  <main class="container mx-auto py-8 px-4 sm:px-6 lg:px-8">
    <!-- Breadcrumb -->
    <div class="mb-8">
      <nav class="flex" aria-label="Breadcrumb">
        <ol class="flex items-center space-x-4">
          <li>
            <a href="/" class="text-gray-400 hover:text-gray-500">Home</a>
          </li>
          <li>
            <div class="flex items-center">
              <svg class="flex-shrink-0 h-5 w-5 text-gray-300" fill="currentColor" viewBox="0 0 20 20">
                <path d="M5.555 17.776l8-16 .894.448-8 16-.894-.448z" />
              </svg>
              <a href="/orders" class="ml-4 text-gray-400 hover:text-gray-500">Orders</a>
            </div>
          </li>
          <li>
            <div class="flex items-center">
              <svg class="flex-shrink-0 h-5 w-5 text-gray-300" fill="currentColor" viewBox="0 0 20 20">
                <path d="M5.555 17.776l8-16 .894.448-8 16-.894-.448z" />
              </svg>
              <span class="ml-4 text-gray-500">Return Request</span>
            </div>
          </li>
        </ol>
      </nav>
    </div>

    <!-- Main Return Form Card -->
    <div class="max-w-4xl mx-auto bg-white rounded-xl shadow-lg overflow-hidden">
      <!-- Progress Bar -->
      <div class="relative h-2">
        <div class="absolute w-full h-full bg-gray-100"></div>
        <div id="progressBar" class="absolute h-full bg-gradient-to-r from-orange-500 to-red-500 transition-all duration-500 ease-out" style="width: 33%;"></div>
      </div>

      <!-- Form Content -->
      <div class="p-8">
        <div class="text-center mb-8">
          <h1 class="text-2xl font-bold text-gray-900">Return Request</h1>
          <p class="text-gray-500 mt-2">Order #<%= order._id %></p>
        </div>

        <form id="returnForm" data-order-id="<%= order._id %>">
          <!-- Step 1: Select Items -->
          <div id="step1" class="step-content">
            <h2 class="text-xl font-semibold mb-4">Step 1: Select Items to Return</h2>
            <div class="space-y-4">
              <% order.items.forEach(item => { %>
              <div class="flex items-center p-4 border rounded-lg hover:border-red-500 transition-colors duration-200">
                <input type="checkbox" name="items" value="<%= item.productId._id %>" class="w-5 h-5 text-red-600 rounded border-gray-300 focus:ring-red-500">
                <div class="ml-4 flex items-center flex-1">
                  <div class="w-16 h-16 rounded-lg overflow-hidden">
                    <img src="<%= item.productId.images[0] %>" alt="<%= item.productId.name %>" class="w-full h-full object-cover">
                  </div>
                  <div class="ml-4">
                    <h3 class="text-sm font-medium text-gray-900"><%= item.productId.name %></h3>
                    <p class="text-sm text-gray-500">Quantity: <%= item.quantity %></p>
                    <p class="text-sm text-gray-500">â‚¹<%= item.price %></p>
                  </div>
                </div>
              </div>
              <% }); %>
            </div>
          </div>

          <!-- Step 2: Return Details -->
          <div id="step2" class="step-content hidden">
            <h2 class="text-xl font-semibold mb-4">Step 2: Return Details</h2>
            <div class="space-y-6">
              <!-- Return Reason -->
              <div>
                <label class="block text-sm font-medium text-gray-700 mb-2">Reason for Return *</label>
                <select name="reason" required class="w-full p-4 rounded-lg border-gray-300 focus:ring-indigo-500 focus:border-indigo-500">
                  <option value="">Select a reason</option>
                  <option value="defective">Item is defective/damaged</option>
                  <option value="Wrong Item">Received wrong item</option>
                  <option value="Not as Described">Item not as described</option>
                  <option value="changed_mind">Changed my mind</option>
                </select>
              </div>

              <!-- Item Condition -->
              <div>
                <label class="block text-sm font-medium text-gray-700 mb-2">Item Condition *</label>
                <select name="condition" required class="w-full p-4 rounded-lg border-gray-300 focus:ring-indigo-500 focus:border-indigo-500">
                  <option value="">Select condition</option>
                  <option value="unused">Unused with tags</option>
                  <option value="opened">Opened but unused</option>
                  <option value="damaged">Damaged/Defective</option>
                </select>
              </div>

              <!-- Comments -->
              <div>
                <label class="block text-sm font-medium text-gray-700 mb-2">Additional Comments</label>
                <textarea name="comments" rows="4" class=" p-4 w-full rounded-lg border-gray-300 focus:ring-indigo-500 focus:border-indigo-500" placeholder="Please provide any additional details about your return..."></textarea>
              </div>
            </div>
          </div>

          <!-- Step 3: Confirmation -->
          <div id="step3" class="step-content hidden text-center">
            <div class="flex flex-col items-center justify-center py-12">
              <div class="rounded-full bg-green-100 p-6 mb-6">
                <svg class="w-16 h-16 text-green-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
                </svg>
              </div>
              <h2 class="text-2xl font-bold text-gray-900 mb-2">Return Request Submitted!</h2>
              <p class="text-gray-500 mb-8">We'll review your request and get back to you within 24-48 hours.</p>
              <a href="/orders" class="inline-flex items-center px-6 py-3 border border-transparent text-base font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-700">
                Back to Orders
              </a>
            </div>
          </div>

          <!-- Navigation Buttons -->
          <div class="flex justify-between pt-6">
            <button type="button" id="prevBtn" class="hidden px-6 py-3 bg-gray-100 text-gray-700 rounded-md hover:bg-gray-200 transition-colors duration-200">
              Previous
            </button>
            <button type="button" id="nextBtn" class="ml-auto px-6 py-3 bg-red-600 text-white rounded-md hover:bg-red-700 transition-colors duration-200">
              Next
            </button>
          </div>
        </form>
      </div>
    </div>
  </main>

  <!-- Footer -->
  <%- include('../layouts/footer.ejs') %>

  <script>
    // Get DOM elements
    const form = document.getElementById('returnForm');
    const step1 = document.getElementById('step1');
    const step2 = document.getElementById('step2');
    const step3 = document.getElementById('step3');
    const nextBtn = document.getElementById('nextBtn');
    const prevBtn = document.getElementById('prevBtn');
    const progressBar = document.getElementById('progressBar');

    let currentStep = 1;
    const totalSteps = 3;

    // Initialize GSAP animations
    gsap.from('.step-content', {
      opacity: 0,
      x: -50,
      duration: 0.5,
      ease: 'power2.out'
    });

    // Function to update progress bar
    const updateProgress = (step) => {
      const progress = (step / totalSteps) * 100;
      progressBar.style.width = `${progress}%`;
    };

    // Function to validate step 1
    const validateStep1 = () => {
      const selectedItems = document.querySelectorAll('input[name="items"]:checked');
      if (selectedItems.length === 0) {
        showError('Please select at least one item to return');
        return false;
      }
      return true;
    };

    // Function to validate step 2
    const validateStep2 = () => {
      const reason = document.querySelector('select[name="reason"]').value;
      const condition = document.querySelector('select[name="condition"]').value;
      const comments = document.querySelector('textarea[name="comments"]').value;

      if (!reason || !condition || !comments.trim()) {
        showError('Please fill in all required fields');
        return false;
      }
      return true;
    };

    // Function to show error message
    const showError = (message) => {
      const errorDiv = document.createElement('div');
      errorDiv.className = 'bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative mb-4 slide-in';
      errorDiv.innerHTML = message;

      // Remove any existing error messages
      const existingError = form.querySelector('.bg-red-100');
      if (existingError) {
        existingError.remove();
      }

      form.insertBefore(errorDiv, form.firstChild);

      // Remove error message after 3 seconds
      setTimeout(() => {
        errorDiv.remove();
      }, 3000);
    };

    // Handle next button click
    nextBtn.addEventListener('click', async () => {
      if (currentStep === 1 && validateStep1()) {
        step1.classList.add('hidden');
        step2.classList.remove('hidden');
        prevBtn.classList.remove('hidden');
        currentStep = 2;
        updateProgress(currentStep);
      } else if (currentStep === 2 && validateStep2()) {
        // Prepare form data
        const formData = {
          selectedItems: Array.from(document.querySelectorAll('input[name="items"]:checked')).map(checkbox => ({
            productId: checkbox.value,
            quantity: 1
          })),
          reason: document.querySelector('select[name="reason"]').value,
          condition: document.querySelector('select[name="condition"]').value,
          comments: document.querySelector('textarea[name="comments"]').value
        };


        console.log(formData)

        try {
          const orderId = form.dataset.orderId;
          const response = await fetch(`/order/return/${orderId}`, {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify(formData)
          });

          const data = await response.json();

          if (data.success) {
            step2.classList.add('hidden');
            step3.classList.remove('hidden');
            nextBtn.classList.add('hidden');
            prevBtn.classList.add('hidden');
            currentStep = 3;
            updateProgress(currentStep);

            // Animate success message
            gsap.from('#step3 > div', {
              scale: 0.5,
              opacity: 0,
              duration: 0.5,
              ease: 'back.out'
            });
          } else {
            showError(data.message || 'Failed to submit return request');
          }
        } catch (error) {
          console.error('Error:', error);
          showError('An error occurred while submitting your return request');
        }
      }
    });

    // Handle previous button click
    prevBtn.addEventListener('click', () => {
      if (currentStep === 2) {
        step2.classList.add('hidden');
        step1.classList.remove('hidden');
        prevBtn.classList.add('hidden');
        currentStep = 1;
        updateProgress(currentStep);
      }
    });

    // Add animation to checkboxes
    document.querySelectorAll('input[name="items"]').forEach(checkbox => {
      checkbox.addEventListener('change', (e) => {
        const parent = e.target.closest('.flex');
        if (e.target.checked) {
          gsap.to(parent, {
            scale: 1.02,
            duration: 0.2,
            ease: 'power2.out'
          });
        } else {
          gsap.to(parent, {
            scale: 1,
            duration: 0.2,
            ease: 'power2.out'
          });
        }
      });
    });
  </script>
</body>

</html>