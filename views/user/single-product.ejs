<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Yadro - Product Page</title>
  <link rel="icon" href="/images/logo.png" type="image/x-icon">
  <script src="https://cdn.tailwindcss.com"></script>
  <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css" rel="stylesheet">
  <link rel="stylesheet" href="/css/single-product.css">
  <link rel="stylesheet" href="/css/like-button.css">
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

  <style>
    .zoom-container {
      position: relative;
      overflow: hidden;
      cursor: zoom-in;
    }

    .zoom-image {
      width: 100%;
      height: auto;
      transition: transform 0.3s ease-out;
    }
  </style>
</head>

<body class="bg-gray-100 font-sans">
  <%- include('../layouts/header-with-user.ejs') %>

  <!-- Breadcrumbs -->
  <nav aria-label="Breadcrumb" class="py-4 px-6 bg-white shadow-sm">
    <ol id="breadcrumbs" class="flex items-center space-x-2 text-sm">
      <li class="flex items-center">
        <a href="/home" class="text-gray-500 hover:text-gray-700 transition-colors duration-300 flex items-center">
          <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 12l2-2m0 0l7-7 7 7M5 10v10a1 1 0 001 1h3m10-11l2 2m-2-2v10a1 1 0 01-1 1h-3m-6 0a1 1 0 001-1v-4a1 1 0 011-1h2a1 1 0 011 1v4a1 1 0 001 1m-6 0h6" />
          </svg>
          Home
        </a>
      </li>
      <!-- Breadcrumb items will be dynamically inserted here -->
    </ol>
  </nav>

  <main class="container mx-auto px-6 py-8">
    <div class="flex flex-wrap -mx-4">
      <div class="w-full md:w-1/2 px-4 mb-8 md:mb-0">
        <div class="sticky top-0">
          <div class="mb-6 relative zoom-container rounded-lg shadow-md">
            <img id="mainImage" src="<%= product.images[0] %>" alt="<%= product.name %>" class="zoom-image rounded-lg">
            <div class="zoom-lens"></div>
            <div class="zoom-result"></div>
            <% if (product.productOffer > 0) { %>
            <div class="absolute top-4 left-4 bg-red-500 text-white text-xs font-bold px-2 py-1 rounded-full z-20 transform -rotate-12 shadow-lg animate-pulse">
              <%= product.productOffer %>% OFF
            </div>
            <% } %>
          </div>
          <div class="flex -mx-2">
            <% product.images.forEach((img, index) => { %>
            <div class="w-1/4 px-2">
              <img src="<%= img %>" alt="Thumbnail <%= index + 1 %>" class="product-thumbnail w-full rounded-lg shadow-sm cursor-pointer hover:opacity-75 transition duration-300">
            </div>
            <% }) %>
          </div>
        </div>
      </div>
      <div class="w-full md:w-1/2 px-4 animate-slideIn">
        <h1 class="text-3xl font-bold mb-2"><%= product.name %></h1>
        <p class="text-gray-600 mb-4"><%= product.brand %></p>
        <div class="flex items-center mb-4">
          <div class="flex text-yellow-400">
            <% for (let i = 0; i < 5; i++) { %>
            <i class="<%= i < Math.floor(product.rating) ? 'fas' : 'far' %> fa-star"></i>
            <% } %>
          </div>
          <span class="text-gray-600 ml-2">(150 Reviews)</span>
        </div>
        <p class="text-gray-600 mb-6"><%= product.description %></p>
        <div class="mb-6">
          <div class="flex items-center space-x-4">
            <span class="price-tag text-red-500 text-2xl">₹ <%= product.salePrice %></span>
            <% if (product.regularPrice > product.salePrice) { %>
            <span class="original-price text-xl  line-through ">₹ <%= product.regularPrice %></span>

            <span class="discount-percentage text-sm">
              <%= product.productOffer %>% OFF
            </span>
            <% } %>
          </div>
        </div>


        <div class="mb-6">
          <h3 class="text-lg font-semibold mb-2">Colour: <%= product.color %></h3>
          <div class="w-8 h-8 rounded-full" style="background-color:<%= product.color %>;"></div>
        </div>

        <div class="mb-6">
          <h3 class="text-lg font-semibold mb-2">Category:</h3>
          <span class="inline-block bg-gray-200 rounded-full px-3 py-1 text-sm font-semibold text-gray-700 mr-2">
            <%= category.name %>
          </span>
        </div>

        <div class="mb-6">
          <h3 class="text-lg font-semibold mb-2">Status:</h3>
          <span class="product-status status-<%= product.status.toLowerCase().replace(' ', '') %> text-sm font-semibold">
            <%= product.status %>
          </span>
        </div>

        <div class="flex items-center mb-6">
          <div class="flex items-center border border-gray-300 rounded-md">
            <button class="px-3 py-1 text-gray-600 hover:text-gray-700 focus:outline-none" onclick="updateQuantity(-1)">-</button>
            <input type="number" id="quantity" class="w-12 text-center border-none custom-number-input" value="1" min="1" max="<%= product.quantity %>">
            <button class="px-3 py-1 text-gray-600 hover:text-gray-700 focus:outline-none" onclick="updateQuantity(1)">+</button>
          </div>
          <span class="ml-4 text-sm text-gray-600">
            <%= product.quantity %> items available
          </span>
        </div>

        <div class="flex items-center mb-6">
          <button id="buyNowBtn" class="px-6 py-2 bg-red-600 text-white rounded-md hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500 transition duration-300 ease-in-out transform hover:-translate-y-1">
            Buy Now
          </button>
          <button id="addToCartBtn" class="ml-4 px-6 py-2 bg-gray-800 text-white rounded-md hover:bg-gray-900 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-gray-500 transition duration-300 ease-in-out transform hover:-translate-y-1">
            Add to Cart
          </button>
          <button id="wishlistBtn" class="ml-4 text-gray-600 hover:text-red-600 focus:outline-none transition duration-300 ease-in-out transform hover:-translate-y-1">
            <i class="far fa-heart text-2xl"></i>
          </button>
        </div>

        <div class="border-t border-gray-200 pt-6">
          <div class="mb-4">
            <div class="flex items-center text-sm text-gray-600">
              <i class="fas fa-truck mr-2"></i>
              <span>Free Delivery</span>
            </div>
            <p class="text-xs text-gray-500">Enter your postal code for Delivery Availability</p>
          </div>
          <div>
            <div class="flex items-center text-sm text-gray-600">
              <i class="fas fa-undo mr-2"></i>
              <span>Return Delivery</span>
            </div>
            <p class="text-xs text-gray-500">Free 30 Days Delivery Returns. Details</p>
          </div>
        </div>
      </div>
    </div>

    <!-- Related Items section remains the same -->
    <section class="mt-16">
      <h2 class="text-2xl font-bold mb-6">Related Items</h2>
      <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
        <% relatedProducts.forEach(product => { %>

        <div class="product-card bg-white rounded-lg shadow-lg overflow-hidden transform hover:scale-105 transition-all duration-300 animate-fade-in">
          <!-- Image Slider -->
          <div class="relative overflow-hidden group h-64">
            <div class="image-slider flex transition-transform duration-500 ease-in-out h-full">
              <% product.images.forEach(image => { %>
              <img src="<%= image %>" alt="Product" class="w-full h-full object-cover flex-shrink-0">
              <% }) %>
            </div>
            <!-- Slider Navigation -->
            <div class="absolute inset-0 flex items-center justify-between p-4 opacity-0 group-hover:opacity-100 transition-opacity duration-300">
              <button class="slider-arrow bg-white bg-opacity-75 hover:bg-opacity-100 rounded-full p-2 focus:outline-none transform -translate-x-10 group-hover:translate-x-0 transition-all duration-300" data-direction="prev">
                <svg class="w-6 h-6 text-gray-800" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
                </svg>
              </button>
              <button class="slider-arrow bg-white bg-opacity-75 hover:bg-opacity-100 rounded-full p-2 focus:outline-none transform translate-x-10 group-hover:translate-x-0 transition-all duration-300" data-direction="next">
                <svg class="w-6 h-6 text-gray-800" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
                </svg>
              </button>
            </div>
          </div>
          <a href="/product-detail/<%= product._id %>">
            <!-- Product Info -->
            <div class="p-6">
              <h3 class="text-xl font-bold text-gray-900 mb-2"><%= product.name %></h3>
              <div class="flex items-center justify-between mb-4">
                <div class="flex items-center">
                  <span class="text-2xl font-bold text-red-600">₹<%= product.salePrice %></span>
                  <span class="text-sm text-gray-500 line-through ml-2">₹<%= product.regularPrice %></span>
                </div>
                <span class="bg-red-100 text-red-800 text-xs font-semibold px-2.5 py-0.5 rounded"> <%= product.productOffer %> % OFF</span>
              </div>

              <!-- Rating Stars -->
              <div class="flex items-center mb-4">
                <div class="flex text-yellow-400">
                  <% for (let i = 1; i <= 5; i++) { %>
                  <svg class="w-5 h-5 fill-current" viewBox="0 0 24 24">
                    <path d="M12 17.27L18.18 21l-1.64-7.03L22 9.24l-7.19-.61L12 2 9.19 8.63 2 9.24l5.46 4.73L5.82 21z" />
                  </svg>
                  <% } %>
                </div>
                <span class="text-gray-600 ml-2">(4.5)</span>
              </div>

          </a>

          <!-- Quantity Selector -->
          <div class="flex items-center justify-between mb-4">
            <span class="text-gray-700 font-medium">Quantity:</span>
            <div class="flex items-center border border-gray-300 rounded-full">
              <button class="quantity-btn minus w-8 h-8 flex items-center justify-center text-gray-600 hover:bg-gray-100 rounded-full focus:outline-none">-</button>
              <input type="number" class="quantity-input w-12 text-center border-none focus:outline-none" value="1" min="1" max="99">
              <button class="quantity-btn plus w-8 h-8 flex items-center justify-center text-gray-600 hover:bg-gray-100 rounded-full focus:outline-none">+</button>
            </div>
          </div>

          <!-- Add to Cart Button -->
          <button data-product-id="<%= product._id %>" class="w-full bg-red-600 hover:bg-red-700 text-white font-bold py-3 px-4 rounded-full transition duration-300 ease-in-out transform hover:scale-105 add-to-cart-btn">
            <span class="add-to-cart-text flex items-center justify-center">
              <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 3h2l.4 2M7 13h10l4-8H5.4M7 13L5.4 5M7 13l-2.293 2.293c-.63.63-.184 1.707.707 1.707H17m0 0a2 2 0 100 4 2 2 0 000-4zm-8 2a2 2 0 11-4 0 2 2 0 014 0z"></path>
              </svg>
              Add to Cart
            </span>
          </button>
        </div>


        <!-- Like Button -->
        <button class="like-button absolute top-4 right-4 bg-white rounded-full p-2 shadow-md hover:bg-red-50 transition-colors duration-300" data-liked="false" data-product-id="<%= product._id %>">
          <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2">
            <path stroke-linecap="round" stroke-linejoin="round" d="M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z" />
          </svg>
        </button>
      </div>
      <% }) %>
      </div>
    </section>
  </main>

  <%- include('../layouts/footer.ejs') %>

  <script src="/js/actions/likeFunction.js"></script>
  <script src="/js/actions/cartFunction.js"></script>


  <script>
    document.getElementById('addToCartBtn').addEventListener('click', async () => {
      const productId = "<%= product._id %>"; // Assuming you have the product ID available
      const quantity = parseInt(document.getElementById('quantity').value);

      try {
        const response = await fetch('/cart/add', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({
            productId,
            quantity
          })
        });

        const data = await response.json();
        if (data.success) {
          Swal.fire({
            title: 'Success!',
            text: 'Product added to cart',
            icon: 'success',
            confirmButtonText: 'OK'
          }).then(() => {
            location.reload();
          });
        } else {
          alert('Error adding product to cart: ' + data.message);
        }
      } catch (error) {
        console.error('Error:', error);
        alert('Something went wrong. Please try again.');
      }
    });

    // Quantity update
    function updateQuantity(change) {
      const quantityInput = document.getElementById('quantity');
      let newValue = parseInt(quantityInput.value) + change;
      newValue = Math.max(1, Math.min(newValue, <%= product.quantity %>));
      quantityInput.value = newValue;
    }

    // Buy Now button
    const buyNowBtn = document.getElementById('buyNowBtn');
    buyNowBtn.addEventListener('click', function() {
      alert('Redirecting to checkout...');
      // Add your checkout logic here
    });

    // Wishlist toggle
    const wishlistBtnn = document.getElementById('wishlistBtn');
    wishlistBtnn.addEventListener('click', function() {
      const icon = this.querySelector('i');
      icon.classList.toggle('far');
      icon.classList.toggle('fas');
      icon.classList.toggle('text-red-600');

      if (icon.classList.contains('fas')) {
        alert('Product added to wishlist!');
      } else {
        alert('Product removed from wishlist!');
      }
      // Add your wishlist logic here
    });

    // Smooth scroll for anchor links
    document.querySelectorAll('a[href^="#"]').forEach(anchor => {
      anchor.addEventListener('click', function(e) {
        e.preventDefault();
        document.querySelector(this.getAttribute('href')).scrollIntoView({
          behavior: 'smooth'
        });
      });
    });

    // Select all thumbnail images
    const thumbnails = document.querySelectorAll('.product-thumbnail');
    const mainImage = document.getElementById('mainImage');

    // Function to update main image
    function updateMainImage(newSrc) {
      // Start fade out
      mainImage.style.opacity = '0';

      // After fade out, update src and fade in
      setTimeout(() => {
        mainImage.src = newSrc;
        mainImage.style.opacity = '1';
      }, 300); // This should match the CSS transition duration
    }

    // Add click event listener to each thumbnail
    thumbnails.forEach(thumbnail => {
      thumbnail.addEventListener('click', function() {
        updateMainImage(this.src);

        // Remove 'active' class from all thumbnails
        thumbnails.forEach(thumb => thumb.classList.remove('active'));

        // Add 'active' class to clicked thumbnail
        this.classList.add('active');
      });
    });

    // Initialize the first thumbnail as active
    if (thumbnails.length > 0) {
      thumbnails[0].classList.add('active');
    }

    const zoomContainer = document.querySelector('.zoom-container');
    const zoomImage = document.querySelector('.zoom-image');

    const ZOOM_LEVEL = 2.5;

    zoomContainer.addEventListener('mousemove', (e) => {
      const {
        left,
        top,
        width,
        height
      } = zoomContainer.getBoundingClientRect();
      const x = (e.clientX - left) / width;
      const y = (e.clientY - top) / height;

      zoomImage.style.transformOrigin = `${x * 100}% ${y * 100}%`;
      zoomImage.style.transform = `scale(${ZOOM_LEVEL})`;
    });

    zoomContainer.addEventListener('mouseleave', () => {
      zoomImage.style.transformOrigin = 'center center';
      zoomImage.style.transform = 'scale(1)';
    });

    // Update zoom image when changing thumbnails
    function updateMainImage(newSrc) {
      zoomImage.style.opacity = '0';
      setTimeout(() => {
        zoomImage.src = newSrc;
        zoomImage.style.opacity = '1';
      }, 300);
    }

    // Breadcrumbs animation
    document.addEventListener('DOMContentLoaded', () => {
      const breadcrumbs = [{
          name: 'Products',
          href: '/products'
        },
        {
          name: '<%= product.name %>',
          href: '#'
        }
      ];

      const breadcrumbsContainer = document.getElementById('breadcrumbs');

      breadcrumbs.forEach((item, index) => {
        const li = document.createElement('li');
        li.className = 'flex items-center';

        const chevron = document.createElement('svg');
        chevron.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 text-gray-400 mx-1" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" /></svg>';
        li.appendChild(chevron);

        if (index === breadcrumbs.length - 1) {
          const span = document.createElement('span');
          span.className = 'text-gray-700 font-semibold animate-fade-in';
          span.textContent = item.name;
          li.appendChild(span);
        } else {
          const a = document.createElement('a');
          a.href = item.href;
          a.className = 'text-gray-500 hover:text-gray-700 transition-colors duration-300 animate-slide-in';
          a.style.animationDelay = `${index * 100}ms`;
          a.textContent = item.name;
          li.appendChild(a);
        }

        breadcrumbsContainer.appendChild(li);
      });
    });
  </script>
  <script src="/js/like-button.js"></script>
</body>

</html>