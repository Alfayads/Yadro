<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Enhanced Order Tracking</title>
  <script src="https://cdn.tailwindcss.com"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/gsap/3.11.4/gsap.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/gsap/3.11.4/ScrollTrigger.min.js"></script>
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">

  <script>
    tailwind.config = {
      theme: {
        extend: {
          colors: {
            'yadro-red': '#FF3366',
            'yadro-dark-red': '#CC1A4A',
          }
        }
      }
    }
  </script>
  <style>
    @import url('https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700&display=swap');

    body {
      font-family: 'Poppins', sans-serif;
    }

    .progress-step {
      position: relative;
    }

    .progress-step::after {
      content: '';
      position: absolute;
      left: calc(50% + 2rem);
      top: 50%;
      width: calc(100% - 4rem);
      height: 2px;
      background-color: #E5E7EB;
      transform: translateY(-50%);
    }

    .progress-step:last-child::after {
      display: none;
    }

    .progress-step.active .step-icon {
      background-color: #FF3366;
      color: white;
    }

    .progress-step.completed .step-icon {
      background-color: #10B981;
      color: white;
    }

    .progress-step.completed::after {
      background-color: #10B981;
    }

    .product-card {
      transition: transform 0.3s ease;
    }

    .product-card:hover {
      transform: translateY(-4px);
    }

    @keyframes pulse {

      0%,
      100% {
        opacity: 1;
      }

      50% {
        opacity: 0.5;
      }
    }

    .shipping-status {
      animation: pulse 2s cubic-bezier(0.4, 0, 0.6, 1) infinite;
    }

    @media (max-width: 768px) {
      .progress-step::after {
        left: 2rem;
        width: 2px;
        height: calc(100% + 2rem);
        top: 3rem;
      }

      .progress-step:last-child::after {
        display: none;
      }
    }
  </style>
</head>

<body class="bg-gray-50">
  <%- include('../layouts/header-with-user.ejs') %>

  <!-- Breadcrumbs -->
  <nav class="container mx-auto px-4 py-4 overflow-x-auto">
    <ol class="flex items-center space-x-2 text-sm whitespace-nowrap">
      <% breadcrumbs.forEach((crumb, index) => { %>
      <li class="flex items-center">
        <% if (crumb.url) { %>
        <a href="<%= crumb.url %>" class="text-gray-500 hover:text-yadro-red transition duration-300">
          <% if (crumb.icon) { %>
          <i class="<%= crumb.icon %> mr-1"></i>
          <% } %>
          <%= crumb.text %>
        </a>
        <% } else { %>
        <span class="text-gray-900 font-medium"><%= crumb.text %></span>
        <% } %>
        <% if (index < breadcrumbs.length - 1) { %>
        <svg class="h-4 w-4 mx-2 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
        </svg>
        <% } %>
      </li>
      <% }) %>
    </ol>
  </nav>

  <main class="container mx-auto px-4 py-8">
    <!-- Order Status Header -->
    <div class="text-center mb-12">
      <h1 class="text-3xl md:text-4xl font-bold text-gray-900 mb-4">Order Tracking</h1>
      <p class="text-gray-600">Order ID: <span class="font-medium"><%= order._id %></span></p>
    </div>

    <!-- Progress Tracker -->
    <div class="bg-white rounded-xl shadow-lg p-6 mb-8">
      <div class="flex flex-col md:flex-row justify-between items-start md:items-center space-y-8 md:space-y-0">
        <% 
                const steps = [
                    { status: 'Ordered', icon: 'fa-shopping-cart' },
                    { status: 'Shipped', icon: 'fa-box' },
                    { status: 'Out For Delivery', icon: 'fa-truck' },
                    { status: 'Delivered', icon: 'fa-check-circle' }
                ];
                
                let currentStepIndex = steps.findIndex(step => step.status === order.orderStatus);
                %>

        <% steps.forEach((step, index) => { %>
        <div class="progress-step <%= index <= currentStepIndex ? 'completed' : '' %> <%= index === currentStepIndex ? 'active' : '' %> flex md:block items-center">
          <div class="step-icon w-12 h-12 rounded-full bg-gray-200 flex items-center justify-center mb-2">
            <i class="fas <%= step.icon %> text-xl"></i>
          </div>
          <div class="ml-4 md:ml-0 md:text-center">
            <h3 class="font-medium"><%= step.status %></h3>
            <% if (index <= currentStepIndex) { %>
            <p class="text-sm text-gray-500">Completed</p>
            <% } %>
          </div>
        </div>
        <% }) %>
      </div>
    </div>

    <!-- Product Details -->
    <div class="grid md:grid-cols-3 gap-8">
      <!-- Order Items -->
      <div class="md:col-span-2">
        <div class="bg-white rounded-xl shadow-lg p-6">
          <h2 class="text-2xl font-semibold mb-6">Order Items</h2>
          <div class="space-y-6">
            <% if (order.items && order.items.length > 0) { %>
            <% order.items.forEach((item, index) => { %>
            <div class="product-card bg-white rounded-lg border border-gray-200 overflow-hidden">
              <div class="flex flex-col md:flex-row">
                <div class="w-full md:w-1/3">
                  <img src="<%= item.productId.images && item.productId.images.length > 0 ? item.productId.images[0] : '/api/placeholder/400/400' %>" alt="<%= item.productId.productName %>" class="w-full h-48 md:h-full object-cover">
                </div>
                <div class="p-6 flex-1">
                  <div class="flex justify-between items-start">
                    <h3 class="text-xl font-semibold text-gray-900"><%= item.productId.productName %></h3>
                    <span class="text-lg font-bold text-yadro-red">₹<%= item.price.toFixed(2) %></span>
                  </div>
                  <p class="text-gray-600 mt-2"><%= item.productId.description %></p>
                  <div class="mt-4 flex items-center space-x-4">
                    <div class="text-sm text-gray-500">Quantity: <span class="font-medium"><%= item.quantity %></span></div>
                    <div class="text-sm text-gray-500">Total: <span class="font-medium">₹<%= (item.price * item.quantity).toFixed(2) %></span></div>
                  </div>
                </div>
              </div>
            </div>
            <% }); %>
            <% } else { %>
            <p class="text-center text-gray-500">No items found in this order</p>
            <% } %>
          </div>
        </div>
      </div>

      <!-- Order Summary -->
      <div class="md:col-span-1">
        <div class="bg-white rounded-xl shadow-lg p-6 sticky top-4">
          <h2 class="text-2xl font-semibold mb-6">Order Summary</h2>
          <div class="space-y-4">
            <div class="flex justify-between">
              <span class="text-gray-600">Subtotal</span>
              <span class="font-medium">₹<%= Math.round(order.totalAmount) %></span>
            </div>
            <div class="flex justify-between">
              <span class="text-gray-600">Discount</span>
              <span class="font-medium text-green-600">
                <% if(order.couponApplied !== null) { %>
                -₹<%= Math.round(order.offerApplied) %>
                <% } else { %>
                ₹0
                <% } %>
              </span>
            </div>
            <div class="flex justify-between">
              <span class="text-gray-600">Shipping</span>
              <span class="font-medium text-green-600">Free</span>
            </div>
            <div class="border-t pt-4 mt-4">
              <div class="flex justify-between items-center">
                <span class="text-lg font-semibold">Total</span>
                <span class="text-xl font-bold text-yadro-red">
                  ₹<%= Math.round(order.totalAmount - (order.offerApplied || 0)) %>
                </span>
              </div>
            </div>

            <% if (order.orderStatus === 'Ordered' || order.orderStatus === 'Shipping') { %>
            <button id="openModal" data-order-id="<%= order._id %>" class="w-full mt-6 bg-red-500 hover:bg-red-600 text-white font-semibold py-3 px-6 rounded-lg transition duration-300 flex items-center justify-center space-x-2">
              <i class="fas fa-times-circle"></i>
              <span>Cancel Order</span>
            </button>
            <% } %>
          </div>
        </div>
      </div>
    </div>

    <!-- Shipping Details -->
    <div class="mt-8 bg-white rounded-xl shadow-lg p-6">
      <h2 class="text-2xl font-semibold mb-6">Shipping Details</h2>
      <div class="grid md:grid-cols-2 gap-8">
        <div>
          <h3 class="text-lg font-medium mb-4">Delivery Address</h3>
          <div class="bg-gray-50 p-4 rounded-lg border-l-4 border-yadro-red">
            <% if (order.deliveryAddress) { %>
            <h4 class="font-semibold"><%= order.deliveryAddress.name %></h4>
            <p class="text-gray-600 mt-2">
              <%= order.deliveryAddress.streetAddress %><br>
              <%= order.deliveryAddress.city %>, <%= order.deliveryAddress.state %><br>
              <%= order.deliveryAddress.postalCode %>
            </p>
            <p class="text-gray-600 mt-2">
              <i class="fas fa-phone-alt mr-2"></i>
              <%= order.deliveryAddress.phone %>
            </p>
            <% } %>
          </div>
        </div>
        <div>
          <h3 class="text-lg font-medium mb-4">Order Information</h3>
          <div class="space-y-3">
            <div class="flex justify-between">
              <span class="text-gray-600">Order Date</span>
              <span class="font-medium"><%= order.formattedDate %></span>
            </div>
            <div class="flex justify-between">
              <span class="text-gray-600">Payment Method</span>
              <span class="font-medium"><%= order.paymentMethod %></span>
            </div>
            <div class="flex justify-between">
              <span class="text-gray-600">Status</span>
              <span class="font-medium shipping-status text-yadro-red">
                <%= order.orderStatus %>
              </span>
            </div>
          </div>
        </div>
      </div>
    </div>
  </main>


  <div id="cancellationModal" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center opacity-0 invisible transition-opacity duration-300">
    <div class="bg-white rounded-lg shadow-2xl w-full max-w-md transform scale-95 transition-transform duration-300">
      <div class="gradient-bg h-2 rounded-t-lg"></div>
      <div class="p-6">
        <h3 class="text-2xl font-bold text-gray-900 mb-4">Cancel Your Order</h3>
        <p class="text-gray-600 mb-6">We're sorry to see you cancel. Please tell us why you're canceling so we can improve our service.</p>
        <select id="cancellationReason" class="w-full px-3 py-2 text-gray-700 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 transition duration-300 mb-4">
          <option value="">Select a reason</option>
          <option value="Changed my mind">Changed my mind</option>
          <option value="Found a better price elsewhere">Found a better price elsewhere</option>
          <option value="Shipping time too long">Shipping time too long</option>
          <option value="Ordered by mistake">Ordered by mistake</option>
          <option value="Other">Other</option>
        </select>
        <textarea id="cancellationComment" class="w-full px-3 py-2 text-gray-700 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 transition duration-300 mb-6" rows="4" placeholder="Additional comments (optional)"></textarea>
        <div class="flex justify-end space-x-4">
          <button id="cancelBtn" class="px-4 py-2 bg-gray-200 text-gray-800 rounded-lg hover:bg-gray-300 transition duration-300">
            Never Mind
          </button>
          <button id="confirmCancelBtn" class="px-4 py-2 bg-red-500 text-white rounded-lg hover:bg-red-600 transition duration-300">
            Confirm Cancellation
          </button>
        </div>
      </div>
    </div>
  </div>

  <%- include('../layouts/footer.ejs') %>

  <script>
    // Animate breadcrumbs
    const breadcrumbItems = document.querySelectorAll('.breadcrumb-item');
    gsap.from(breadcrumbItems, {
      opacity: 0,
      x: -20,
      stagger: 0.1,
      duration: 0.5,
      ease: 'power2.out'
    });


    gsap.registerPlugin(ScrollTrigger);

    // Animate the progress bar
    gsap.from(".progress-bar .bg-white", {
      width: 0,
      duration: 2,
      ease: "power2.out",
      scrollTrigger: {
        trigger: ".progress-bar",
        start: "top 80%",
        end: "bottom 20%",
        toggleActions: "restart pause resume pause"
      }
    });

    // Animate the status icons
    gsap.from(".w-16", {
      scale: 0,
      opacity: 0,
      duration: 0.8,
      stagger: 0.2,
      ease: "back.out(1.7)",
      scrollTrigger: {
        trigger: ".gradient-bg",
        start: "top 80%",
        end: "bottom 20%",
        toggleActions: "restart pause resume pause"
      }
    });

    // Animate the order details
    gsap.from(".card-hover", {
      y: 50,
      opacity: 0,
      duration: 1,
      stagger: 0.3,
      ease: "power3.out",
      scrollTrigger: {
        trigger: ".space-y-6",
        start: "top 80%",
        end: "bottom 20%",
        toggleActions: "restart pause resume pause"
      }
    });


    gsap.from(".address-card", {
      x: -50,
      opacity: 0,
      duration: 1,
      ease: "power3.out",
      scrollTrigger: {
        trigger: ".address-card",
        start: "top 80%",
        toggleActions: "restart pause resume pause"
      }
    });

    gsap.from(".cancel-button", {
      scale: 0.8,
      opacity: 0,
      duration: 0.5,
      ease: "back.out(1.7)",
      scrollTrigger: {
        trigger: ".cancel-button",
        start: "top 90%",
        toggleActions: "restart pause resume pause"
      }
    });

    // Cancel order confirmation
    function confirmCancel() {
      if (confirm('Are you sure you want to cancel this order?')) {
        // Show loading state
        const button = document.querySelector('.cancel-button');
        const originalText = button.innerHTML;
        button.innerHTML = '<i class="fas fa-spinner fa-spin mr-2"></i>Processing...';
        button.disabled = true;

        // Make API call to cancel order
        fetch('/api/orders/<%= order._id %>/cancel', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            }
          })
          .then(response => response.json())
          .then(data => {
            if (data.success) {
              // Show success message and reload page
              alert('Order cancelled successfully');
              window.location.reload();
            } else {
              throw new Error(data.message || 'Failed to cancel order');
            }
          })
          .catch(error => {
            alert(error.message);
            // Reset button state
            button.innerHTML = originalText;
            button.disabled = false;
          });
      }
    }




    const modal = document.getElementById('cancellationModal');
    const modalContent = modal.querySelector('.bg-white');
    const cancelBtn = document.getElementById('cancelBtn');
    const confirmCancelBtn = document.getElementById('confirmCancelBtn');
    const reasonSelect = document.getElementById('cancellationReason');
    const commentTextarea = document.getElementById('cancellationComment');

    let currentOrderId; // Variable to store current order ID


    // Function to open modal
    function openModal(orderId) {
      currentOrderId = orderId;
      modal.classList.remove('invisible');
      gsap.to(modal, {
        opacity: 1,
        duration: 0.3,
        ease: "power2.out"
      });
      gsap.to(modalContent, {
        scale: 1,
        opacity: 1,
        duration: 0.3,
        ease: "back.out(1.7)"
      });
    }

    // Function to close modal
    function closeModal() {
      gsap.to(modalContent, {
        scale: 0.95,
        opacity: 0,
        duration: 0.2,
        ease: "power2.in"
      });
      gsap.to(modal, {
        opacity: 0,
        duration: 0.2,
        ease: "power2.in",
        onComplete: () => {
          modal.classList.add('invisible');
          reasonSelect.value = "";
          commentTextarea.value = "";
        }
      });
    }



    // Add event listeners
    document.addEventListener('DOMContentLoaded', () => {
      // Attach event listeners to all cancel order buttons
      document.querySelectorAll('#openModal').forEach(btn => {
        btn.addEventListener('click', (e) => {
          // Get the order ID from the closest tr element's data attribute
          const orderId = e.target.closest('tr').dataset.orderId;
          openModal(orderId);
          console.log("open model order id ==> ", orderId);
        });
      });

      // Cancel button event listener
      cancelBtn.addEventListener('click', closeModal);

      // Confirm cancellation button event listener
      confirmCancelBtn.addEventListener('click', () => {
        if (reasonSelect.value) {
          const reason = reasonSelect.value;
          const comments = commentTextarea.value;

          // Call the cancelOrder function with the current order ID and reason
          cancelOrder(currentOrderId, reason, comments);
        } else {
          // Shake animation for invalid selection
          gsap.to(reasonSelect, {
            x: [-10, 10, -10, 10, 0],
            duration: 0.5,
            ease: "power2.inOut"
          });
          reasonSelect.classList.add('ring-2', 'ring-red-500');
          setTimeout(() => reasonSelect.classList.remove('ring-2', 'ring-red-500'), 2000);
        }
      });

      // Close modal when clicking outside
      modal.addEventListener('click', (e) => {
        if (e.target === modal) {
          closeModal();
        }
      });
    });

    // Enhanced cancel order function
    function cancelOrder(orderId, reason, comments) {

      function getFormattedDateTime() {
        const now = new Date();
        const options = {
          year: 'numeric',
          month: 'long',
          day: 'numeric',
          hour: 'numeric',
          minute: 'numeric',
          hour12: true
        };

        return now.toLocaleString('en-US', options);
      }
      const loadingOverlay = showLoadingAnimation();
      console.log('order cancel request ', orderId, reason, comments)
      fetch(`/order/cancel/${orderId}`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            reason: reason,
            comments: comments,
            cancelDate: getFormattedDateTime()
          })
        })
        .then(response => {
          hideLoadingAnimation(loadingOverlay);
          if (response.ok) {
            closeModal();
            showSuccessMessage({
              title: 'Order Cancelled !!',
              message: 'Your order has been cancelled successfully.',
              buttonText: 'Show Order Details',
              details: {
                'Order ID': orderId,
                'Reason': reason,
                'Comments': comments,
                'Date': getFormattedDateTime()
              },
              onButtonClick: () => {
                window.location.href = `/order-tracking/${orderId}`
              },
              autoClose: false // Close after 7 seconds
            });

            // Animate and remove the cancelled order row
            const cancelledRow = document.querySelector(`tr[data-order-id="${orderId}"]`);
            if (cancelledRow) {
              gsap.to(cancelledRow, {
                backgroundColor: '#FEE2E2',
                color: '#991B1B',
                duration: 0.5,
                ease: "power2.inOut",
                onComplete: () => {
                  setTimeout(() => {
                    gsap.to(cancelledRow, {
                      opacity: 0,
                      height: 0,
                      duration: 0.5,
                      ease: "power2.inOut",
                      onComplete: () => {
                        cancelledRow.remove();
                        // // Reload the page if needed
                        // location.reload();
                      }
                    });
                  }, 1000);
                }
              });
            }
          } else {
            throw new Error('Failed to cancel order');
          }
        })
        .catch(error => {
          hideLoadingAnimation(loadingOverlay);
          console.error("Error:", error);
          showErrorMessage('An error occurred. Please try again.');
        });
    }
  </script>
</body>

</html>